<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>墨言酥语</title>
  
  <subtitle>清风徐来，好花自开。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.moyansuyu.com/"/>
  <updated>2020-02-29T11:17:15.989Z</updated>
  <id>http://www.moyansuyu.com/</id>
  
  <author>
    <name>Adolph Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试</title>
    <link href="http://www.moyansuyu.com/2020/02/29/%E6%B5%8B%E8%AF%95/"/>
    <id>http://www.moyansuyu.com/2020/02/29/测试/</id>
    <published>2020-02-29T11:16:24.292Z</published>
    <updated>2020-02-29T11:17:15.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>本篇文章属于测试篇章，主要查看系统是否正常。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h1&gt;&lt;p&gt;本篇文章属于测试篇章，主要查看系统是否正常。&lt;/p&gt;

      
    
    </summary>
    
      <category term="数据科学" scheme="http://www.moyansuyu.com/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>神经网络算法</title>
    <link href="http://www.moyansuyu.com/2019/09/01/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%AE%97%E6%B3%95/"/>
    <id>http://www.moyansuyu.com/2019/09/01/神经网络算法/</id>
    <published>2019-09-01T11:38:43.444Z</published>
    <updated>2019-08-04T10:15:58.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><p>关于感知机，既有好消息，也有坏清息，好消息是，即便对于复杂的函数，感知机也隐含眷能够表示它的可能性.上一章已经介绍过，即便是计算机进行的复杂处理，感知机（理论上）也可以将其表示出来。坏消息是，设定权重的工作，即确定合适的、能符合预期的输入与输出的权重，现在还是由人工进行的。</p><p>神经网络的出现就是为了解决刚才的坏消息。具体地讲，神经网络的一个重要性质是它可以自动地从数据中学习到合适的权重参数。本章中，我们会先介绍神经网络的概要，然后重点关注神经网络进行识别时的处理。</p><p>一般而言，“朴素感知机”是指单层网络，指的是激活函数使用了阶跃函数(阶跃函数是指一旦输入超过阈值，就切换输出的函数)的模型。“多层感知机”是指神经网络，即使用sigmoid函数等平滑的激活函数的多层网络。</p><h1 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h1><p>激活函数是链接感知机和神经网络的桥梁。</p><p>sigmoid函数的平滑性对于神经网络的学习具有重要意义。</p><p>感知机中神经元之间流动的是0或1的二元信号，而神经网络中流动的是连续的实数值信号。</p><p>阶跃函数和sigmoid函数，此两者均为非线性函数(指的是不像线性函数那样呈现出一条直线的函数)。</p><p>神经网络的激活函数必须使用非线性函数。</p><h1 id="多维数组的运算"><a href="#多维数组的运算" class="headerlink" title="多维数组的运算"></a>多维数组的运算</h1><p>数组的维度可以通过np.dim()函数获得，数组的形状可以通过实例变量shape获得，其返回的结果是一个元组(tuple)。</p><p>对于两个2*2的矩阵A和B，它们的乘积可以通过NumPy的 np.dot(A,B) 函数计算。np.dot()接收两个NumPy数组作为参数，并返回数组的乘积。不过，np.dot(A,B) 和 np.dot(B,A) 的值可能不一样。同样，其他形状的矩阵的乘积也可以使用相同的方法来计算。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;神经网络&quot;&gt;&lt;a href=&quot;#神经网络&quot; class=&quot;headerlink&quot; title=&quot;神经网络&quot;&gt;&lt;/a&gt;神经网络&lt;/h1&gt;&lt;p&gt;关于感知机，既有好消息，也有坏清息，好消息是，即便对于复杂的函数，感知机也隐含眷能够表示它的可能性.上一章已经介绍过，即便是
      
    
    </summary>
    
      <category term="机器学习" scheme="http://www.moyansuyu.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>机器学习算法介绍</title>
    <link href="http://www.moyansuyu.com/2019/09/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.moyansuyu.com/2019/09/01/机器学习算法介绍/</id>
    <published>2019-09-01T11:38:43.413Z</published>
    <updated>2019-08-04T10:13:38.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>谷歌董事长施密特曾说过：虽然谷歌的无人驾驶汽车和机器人受到了许多媒体关注，但是这家公司真正的未来在于机器学习，一种让计算机更聪明、更个性化的技术。</p><p>也许我们生活在人类历史上最关键的时期：从使用大型计算机，到个人电脑，再到现在的云计算。关键的不是过去发生了什么，而是将来会有什么发生。</p><p>工具和技术的民主化，让像我这样的人对这个时期兴奋不已。计算的蓬勃发展也是一样。如今，作为一名数据科学家，用复杂的算法建立数据处理机器一小时能赚到好几美金。但能做到这个程度可并不简单！我也曾有过无数黑暗的日日夜夜。</p><p>谁能从这篇指南里受益最多？<br>我今天所给出的，也许是我这辈子写下的最有价值的指南。</p><p>这篇指南的目的，是为那些有追求的数据科学家和机器学习狂热者们，简化学习旅途。这篇指南会让你动手解决机器学习的问题，并从实践中获得真知。我提供的是几个机器学习算法的高水平理解，以及运行这些算法的 R 和 Python 代码。这些应该足以让你亲自试一试了。</p><p>我特地跳过了这些技术背后的数据，因为一开始你并不需要理解这些。如果你想从数据层面上理解这些算法，你应该去别处找找。但如果你想要在开始一个机器学习项目之前做些准备，你会喜欢这篇文章的。</p><p>广义来说，有三种机器学习算法<br>1、 监督式学习<br>工作机制：这个算法由一个目标变量或结果变量（或因变量）组成。这些变量由已知的一系列预示变量（自变量）预测而来。利用这一系列变量，我们生成一个将输入值映射到期望输出值的函数。这个训练过程会一直持续，直到模型在训练数据上获得期望的精确度。监督式学习的例子有：回归、决策树、随机森林、K – 近邻算法、逻辑回归等。</p><p>2、非监督式学习<br>工作机制：在这个算法中，没有任何目标变量或结果变量要预测或估计。这个算法用在不同的组内聚类分析。这种分析方式被广泛地用来细分客户，根据干预的方式分为不同的用户组。非监督式学习的例子有：关联算法和 K – 均值算法。</p><p>3、强化学习<br>工作机制：这个算法训练机器进行决策。它是这样工作的：机器被放在一个能让它通过反复试错来训练自己的环境中。机器从过去的经验中进行学习，并且尝试利用了解最透彻的知识作出精确的商业判断。 强化学习的例子有马尔可夫决策过程。</p><p>常见机器学习算法名单<br>这里是一个常用的机器学习算法名单。这些算法几乎可以用在所有的数据问题上：</p><p>线性回归<br>逻辑回归<br>决策树<br>SVM<br>朴素贝叶斯<br>K最近邻算法<br>K均值算法<br>随机森林算法<br>降维算法<br>Gradient Boost 和 Adaboost 算法<br>1、线性回归<br>线性回归通常用于根据连续变量估计实际数值（房价、呼叫次数、总销售额等）。我们通过拟合最佳直线来建立自变量和因变量的关系。这条最佳直线叫做回归线，并且用 Y= a *X + b 这条线性等式来表示。</p><p>理解线性回归的最好办法是回顾一下童年。假设在不问对方体重的情况下，让一个五年级的孩子按体重从轻到重的顺序对班上的同学排序，你觉得这个孩子会怎么做？他（她）很可能会目测人们的身高和体型，综合这些可见的参数来排列他们。这是现实生活中使用线性回归的例子。实际上，这个孩子发现了身高和体型与体重有一定的关系，这个关系看起来很像上面的等式。</p><p>在这个等式中：</p><p>Y：因变量<br>a：斜率<br>x：自变量<br>b ：截距<br>系数 a 和 b 可以通过最小二乘法获得。</p><p>参见下例。我们找出最佳拟合直线 y=0.2811x+13.9 。已知人的身高，我们可以通过这条等式求出体重。</p><p>线性回归的两种主要类型是一元线性回归和多元线性回归。一元线性回归的特点是只有一个自变量。多元线性回归的特点正如其名，存在多个自变量。找最佳拟合直线的时候，你可以拟合到多项或者曲线回归。这些就被叫做多项或曲线回归。</p><p>Python 代码</p><p>#Import Library</p><p>#Import other necessary libraries like pandas, numpy…<br>from sklearn import linear_model</p><p>#Load Train and Test datasets</p><p>#Identify feature and response variable(s) and values must be numeric and numpy arrays<br>x_train=input_variables_values_training_datasets<br>y_train=target_variables_values_training_datasets<br>x_test=input_variables_values_test_datasets</p><h1 id="Create-linear-regression-object"><a href="#Create-linear-regression-object" class="headerlink" title="Create linear regression object"></a>Create linear regression object</h1><p>linear = linear_model.LinearRegression()</p><h1 id="Train-the-model-using-the-training-sets-and-check-score"><a href="#Train-the-model-using-the-training-sets-and-check-score" class="headerlink" title="Train the model using the training sets and check score"></a>Train the model using the training sets and check score</h1><p>linear.fit(x_train, y_train)<br>linear.score(x_train, y_train)</p><p>#Equation coefficient and Intercept<br>print(‘Coefficient: n’, linear.coef_)<br>print(‘Intercept: n’, linear.intercept_)</p><p>#Predict Output<br>predicted= linear.predict(x_test)<br>R代码</p><p>#Load Train and Test datasets</p><p>#Identify feature and response variable(s) and values must be numeric and numpy arrays<br>x_train &lt;- input_variables_values_training_datasets<br>y_train &lt;- target_variables_values_training_datasets<br>x_test &lt;- input_variables_values_test_datasets<br>x &lt;- cbind(x_train,y_train)</p><h1 id="Train-the-model-using-the-training-sets-and-check-score-1"><a href="#Train-the-model-using-the-training-sets-and-check-score-1" class="headerlink" title="Train the model using the training sets and check score"></a>Train the model using the training sets and check score</h1><p>linear &lt;- lm(y_train ~ ., data = x)<br>summary(linear)</p><p>#Predict Output<br>predicted= predict(linear,x_test)<br>2、逻辑回归<br>别被它的名字迷惑了！这是一个分类算法而不是一个回归算法。该算法可根据已知的一系列因变量估计离散数值（比方说二进制数值 0 或 1 ，是或否，真或假）。简单来说，它通过将数据拟合进一个逻辑函数来预估一个事件出现的概率。因此，它也被叫做逻辑回归。因为它预估的是概率，所以它的输出值大小在 0 和 1 之间（正如所预计的一样）。</p><p>让我们再次通过一个简单的例子来理解这个算法。</p><p>假设你的朋友让你解开一个谜题。这只会有两个结果：你解开了或是你没有解开。想象你要解答很多道题来找出你所擅长的主题。这个研究的结果就会像是这样：假设题目是一道十年级的三角函数题，你有 70%的可能会解开这道题。然而，若题目是个五年级的历史题，你只有30%的可能性回答正确。这就是逻辑回归能提供给你的信息。</p><p>从数学上看，在结果中，几率的对数使用的是预测变量的线性组合模型。</p><p>odds= p/ (1-p) = probability of event occurrence / probability of not event occurrence<br>ln(odds) = ln(p/(1-p))<br>logit(p) = ln(p/(1-p)) = b0+b1X1+b2X2+b3X3….+bkXk<br>在上面的式子里，p 是我们感兴趣的特征出现的概率。它选用使观察样本值的可能性最大化的值作为参数，而不是通过计算误差平方和的最小值（就如一般的回归分析用到的一样）。</p><p>现在你也许要问了，为什么我们要求出对数呢？简而言之，这种方法是复制一个阶梯函数的最佳方法之一。我本可以更详细地讲述，但那就违背本篇指南的主旨了。</p><p>Python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Import Library</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="comment">#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset</span></span><br><span class="line"><span class="comment"># Create logistic regression object</span></span><br><span class="line">model = LogisticRegression()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Train the model using the training sets and check score</span></span><br><span class="line">model.fit(X, y)</span><br><span class="line">model.score(X, y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Equation coefficient and Intercept</span></span><br><span class="line">print(<span class="string">'Coefficient: n'</span>, model.coef_)</span><br><span class="line">print(<span class="string">'Intercept: n'</span>, model.intercept_)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Predict Output</span></span><br><span class="line">predicted= model.predict(x_test)</span><br></pre></td></tr></table></figure><p>R代码</p><p>x &lt;- cbind(x_train,y_train)</p><h1 id="Train-the-model-using-the-training-sets-and-check-score-2"><a href="#Train-the-model-using-the-training-sets-and-check-score-2" class="headerlink" title="Train the model using the training sets and check score"></a>Train the model using the training sets and check score</h1><p>logistic &lt;- glm(y_train ~ ., data = x,family=’binomial’)<br>summary(logistic)</p><p>#Predict Output<br>predicted= predict(logistic,x_test)<br>更进一步：<br>你可以尝试更多的方法来改进这个模型：</p><p>加入交互项<br>精简模型特性<br>使用正则化方法<br>使用非线性模型<br>3、决策树<br>这是我最喜爱也是最频繁使用的算法之一。这个监督式学习算法通常被用于分类问题。令人惊奇的是，它同时适用于分类变量和连续因变量。在这个算法中，我们将总体分成两个或更多的同类群。这是根据最重要的属性或者自变量来分成尽可能不同的组别。想要知道更多，可以阅读：简化决策树 。</p><p>来源： statsexchange</p><p>在上图中你可以看到，根据多种属性，人群被分成了不同的四个小组，来判断 “他们会不会去玩”。为了把总体分成不同组别，需要用到许多技术，比如说 Gini、Information Gain、Chi-square、entropy。</p><p>理解决策树工作机制的最好方式是玩Jezzball，一个微软的经典游戏（见下图）。这个游戏的最终目的，是在一个可以移动墙壁的房间里，通过造墙来分割出没有小球的、尽量大的空间。</p><p>因此，每一次你用墙壁来分隔房间时，都是在尝试着在同一间房里创建两个不同的总体。相似地，决策树也在把总体尽量分割到不同的组里去。</p><p>更多信息请见： 决策树算法的简化</p><p>Python代码</p><p>#Import Library</p><p>#Import other necessary libraries like pandas, numpy…<br>from sklearn import tree</p><p>#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset</p><h1 id="Create-tree-object"><a href="#Create-tree-object" class="headerlink" title="Create tree object"></a>Create tree object</h1><p>model = tree.DecisionTreeClassifier(criterion=’gini’) </p><h1 id="for-classification-here-you-can-change-the-algorithm-as-gini-or-entropy-information-gain-by-default-it-is-gini"><a href="#for-classification-here-you-can-change-the-algorithm-as-gini-or-entropy-information-gain-by-default-it-is-gini" class="headerlink" title="for classification, here you can change the algorithm as gini or entropy (information gain) by default it is gini"></a>for classification, here you can change the algorithm as gini or entropy (information gain) by default it is gini</h1><h1 id="model-tree-DecisionTreeRegressor-for-regression"><a href="#model-tree-DecisionTreeRegressor-for-regression" class="headerlink" title="model = tree.DecisionTreeRegressor() for regression"></a>model = tree.DecisionTreeRegressor() for regression</h1><h1 id="Train-the-model-using-the-training-sets-and-check-score-3"><a href="#Train-the-model-using-the-training-sets-and-check-score-3" class="headerlink" title="Train the model using the training sets and check score"></a>Train the model using the training sets and check score</h1><p>model.fit(X, y)<br>model.score(X, y)</p><p>#Predict Output<br>predicted= model.predict(x_test)<br>R代码</p><p>library(rpart)<br>x &lt;- cbind(x_train,y_train)</p><h1 id="grow-tree"><a href="#grow-tree" class="headerlink" title="grow tree"></a>grow tree</h1><p>fit &lt;- rpart(y_train ~ ., data = x,method=”class”)<br>summary(fit)</p><p>#Predict Output<br>predicted= predict(fit,x_test)<br>4、支持向量机<br>这是一种分类方法。在这个算法中，我们将每个数据在N维空间中用点标出（N是你所有的特征总数），每个特征的值是一个坐标的值。</p><p>举个例子，如果我们只有身高和头发长度两个特征，我们会在二维空间中标出这两个变量，每个点有两个坐标（这些坐标叫做支持向量）。</p><p>现在，我们会找到将两组不同数据分开的一条直线。两个分组中距离最近的两个点到这条线的距离同时最优化。</p><p>上面示例中的黑线将数据分类优化成两个小组，两组中距离最近的点（图中A、B点）到达黑线的距离满足最优条件。这条直线就是我们的分割线。接下来，测试数据落到直线的哪一边，我们就将它分到哪一类去。</p><p>更多请见： 支持向量机的简化</p><p>将这个算法想作是在一个 N 维空间玩 JezzBall。需要对游戏做一些小变动：</p><p>比起之前只能在水平方向或者竖直方向画直线，现在你可以在任意角度画线或平面。<br>游戏的目的变成把不同颜色的球分割在不同的空间里。<br>球的位置不会改变。<br>Python代码</p><p>#Import Library<br>from sklearn import svm</p><p>#Assumed you have, X (predic<br>tor) and Y (target) for training data set and x_test(predictor) of test_dataset</p><h1 id="Create-SVM-classification-object"><a href="#Create-SVM-classification-object" class="headerlink" title="Create SVM classification object"></a>Create SVM classification object</h1><p>model = svm.svc() </p><h1 id="there-is-various-option-associated-with-it-this-is-simple-for-classification-You-can-refer-link-for-mo-re-detail"><a href="#there-is-various-option-associated-with-it-this-is-simple-for-classification-You-can-refer-link-for-mo-re-detail" class="headerlink" title="there is various option associated with it, this is simple for classification. You can refer link, for mo# re detail."></a>there is various option associated with it, this is simple for classification. You can refer link, for mo# re detail.</h1><h1 id="Train-the-model-using-the-training-sets-and-check-score-4"><a href="#Train-the-model-using-the-training-sets-and-check-score-4" class="headerlink" title="Train the model using the training sets and check score"></a>Train the model using the training sets and check score</h1><p>model.fit(X, y)<br>model.score(X, y)</p><p>#Predict Output<br>predicted= model.predict(x_test)<br>R代码</p><p>library(e1071)<br>x &lt;- cbind(x_train,y_train)</p><h1 id="Fitting-model"><a href="#Fitting-model" class="headerlink" title="Fitting model"></a>Fitting model</h1><p>fit &lt;-svm(y_train ~ ., data = x)<br>summary(fit)</p><p>#Predict Output<br>predicted= predict(fit,x_test)<br>5、朴素贝叶斯<br>在预示变量间相互独立的前提下，根据 贝叶斯定理 可以得到朴素贝叶斯这个分类方法。用更简单的话来说，一个朴素贝叶斯分类器假设一个分类的特性与该分类的其它特性不相关。举个例子，如果一个水果又圆又红 ， 并且直径大约是 3 英寸，那么这个水果可能会是苹果。即便这些特性互相依赖 ， 或者依赖于别的特性的存在，朴素贝叶斯分类器还是会假设这些特性分别独立地暗示这个水果是个苹果。</p><p>朴素贝叶斯模型易于建造，且对于大型数据集非常有用。虽然简单，但是朴素贝叶斯的表现却超越了非常复杂的分类方法。</p><p>贝叶斯定理提供了一种从P(c)、P(x)和P(x|c) 计算后验概率 P(c|x) 的方法。请看以下等式：</p><p>在这里，</p><p>P ( c|x ) 是已知预示变量（属性）的前提下，类（目标）的后验概率<br>P ( c ) 是类的先验概率<br>P ( x|c ) 是可能性，即已知类的前提下，预示变量的概率<br>P ( x ) 是预示变量的先验概率<br>例子：让我们用一个例子来理解这个概念。在下面，我有一个天气的训练集和对应的目标变量“Play”。现在，我们需要根据天气情况，将会“玩”和“不玩”的参与者进行分类。让我们执行以下步骤。</p><p>步骤1：把数据集转换成频率表。</p><p>步骤2：利用类似“当Overcast可能性为0.29时，玩耍的可能性为0.64”这样的概率，创造 Likelihood 表格。</p><p>步骤3：现在，使用朴素贝叶斯等式来计算每一类的后验概率。后验概率最大的类就是预测的结果。</p><p>问题：如果天气晴朗，参与者就能玩耍。这个陈述正确吗？</p><p>我们可以使用讨论过的方法解决这个问题。于是 P（会玩 | 晴朗）= P（晴朗 | 会玩）* P（会玩）/ P （晴朗）</p><p>我们有 P （晴朗 |会玩）= 3/9 = 0.33，P（晴朗） = 5/14 = 0.36, P（会玩）= 9/14 = 0.64</p><p>现在，P(会玩 | 晴朗）= 0.33 * 0.64 / 0.36 = 0.60，有更大的概率。</p><p>朴素贝叶斯使用了一个相似的方法，通过不同属性来预测不同类别的概率。这个算法通常被用于文本分类，以及涉及到多个类的问题。</p><p>Python代码</p><p>#Import Library<br>from sklearn.naive_bayes import GaussianNB</p><p>#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset</p><h1 id="Create-SVM-classification-object-model-GaussianNB-there-is-other-distribution-for-multinomial-classes-like-Bernoulli-Naive-Bayes-Refer-link"><a href="#Create-SVM-classification-object-model-GaussianNB-there-is-other-distribution-for-multinomial-classes-like-Bernoulli-Naive-Bayes-Refer-link" class="headerlink" title="Create SVM classification object model = GaussianNB() # there is other distribution for multinomial classes like Bernoulli Naive Bayes, Refer link"></a>Create SVM classification object model = GaussianNB() # there is other distribution for multinomial classes like Bernoulli Naive Bayes, Refer link</h1><h1 id="Train-the-model-using-the-training-sets-and-check-score-5"><a href="#Train-the-model-using-the-training-sets-and-check-score-5" class="headerlink" title="Train the model using the training sets and check score"></a>Train the model using the training sets and check score</h1><p>model.fit(X, y)</p><p>#Predict Output<br>predicted= model.predict(x_test)<br>R代码</p><p>library(e1071)<br>x &lt;- cbind(x_train,y_train)</p><h1 id="Fitting-model-1"><a href="#Fitting-model-1" class="headerlink" title="Fitting model"></a>Fitting model</h1><p>fit &lt;-naiveBayes(y_train ~ ., data = x)<br>summary(fit)</p><p>#Predict Output<br>predicted= predict(fit,x_test)<br>6、KNN（K – 最近邻算法）<br>该算法可用于分类问题和回归问题。然而，在业界内，K – 最近邻算法更常用于分类问题。K – 最近邻算法是一个简单的算法。它储存所有的案例，通过周围k个案例中的大多数情况划分新的案例。根据一个距离函数，新案例会被分配到它的 K 个近邻中最普遍的类别中去。</p><p>这些距离函数可以是欧式距离、曼哈顿距离、明式距离或者是汉明距离。前三个距离函数用于连续函数，第四个函数（汉明函数）则被用于分类变量。如果 K=1，新案例就直接被分到离其最近的案例所属的类别中。有时候，使用 KNN 建模时，选择 K 的取值是一个挑战。</p><p>更多信息：K – 最近邻算法入门（简化版）</p><p>我们可以很容易地在现实生活中应用到 KNN。如果想要了解一个完全陌生的人，你也许想要去找他的好朋友们或者他的圈子来获得他的信息。</p><p>在选择使用 KNN 之前，你需要考虑的事情：</p><p>KNN 的计算成本很高。<br>变量应该先标准化（normalized），不然会被更高范围的变量偏倚。<br>在使用KNN之前，要在野值去除和噪音去除等前期处理多花功夫。<br>Python代码</p><p>#Import Library<br>from sklearn.neighbors import KNeighborsClassifier</p><p>#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset</p><h1 id="Create-KNeighbors-classifier-object-model"><a href="#Create-KNeighbors-classifier-object-model" class="headerlink" title="Create KNeighbors classifier object model"></a>Create KNeighbors classifier object model</h1><p>KNeighborsClassifier(n_neighbors=6) </p><h1 id="default-value-for-n-neighbors-is-5"><a href="#default-value-for-n-neighbors-is-5" class="headerlink" title="default value for n_neighbors is 5"></a>default value for n_neighbors is 5</h1><h1 id="Train-the-model-using-the-training-sets-and-check-score-6"><a href="#Train-the-model-using-the-training-sets-and-check-score-6" class="headerlink" title="Train the model using the training sets and check score"></a>Train the model using the training sets and check score</h1><p>model.fit(X, y)</p><p>#Predict Output<br>predicted= model.predict(x_test)<br>R代码</p><p>library(knn)<br>x &lt;- cbind(x_train,y_train)</p><h1 id="Fitting-model-2"><a href="#Fitting-model-2" class="headerlink" title="Fitting model"></a>Fitting model</h1><p>fit &lt;-knn(y_train ~ ., data = x,k=5)<br>summary(fit)</p><p>#Predict Output<br>predicted= predict(fit,x_test)<br>7、K 均值算法<br>K – 均值算法是一种非监督式学习算法，它能解决聚类问题。使用 K – 均值算法来将一个数据归入一定数量的集群（假设有 k 个集群）的过程是简单的。一个集群内的数据点是均匀齐次的，并且异于别的集群。</p><p>还记得从墨水渍里找出形状的活动吗？K – 均值算法在某方面类似于这个活动。观察形状，并延伸想象来找出到底有多少种集群或者总体。</p><p>K – 均值算法怎样形成集群：</p><p>K – 均值算法给每个集群选择k个点。这些点称作为质心。<br>每一个数据点与距离最近的质心形成一个集群，也就是 k 个集群。<br>根据现有的类别成员，找出每个类别的质心。现在我们有了新质心。<br>当我们有新质心后，重复步骤 2 和步骤 3。找到距离每个数据点最近的质心，并与新的k集群联系起来。重复这个过程，直到数据都收敛了，也就是当质心不再改变。<br>如何决定 K 值：</p><p>K – 均值算法涉及到集群，每个集群有自己的质心。一个集群内的质心和各数据点之间距离的平方和形成了这个集群的平方值之和。同时，当所有集群的平方值之和加起来的时候，就组成了集群方案的平方值之和。</p><p>我们知道，当集群的数量增加时，K值会持续下降。但是，如果你将结果用图表来表示，你会看到距离的平方总和快速减少。到某个值 k 之后，减少的速度就大大下降了。在此，我们可以找到集群数量的最优值。</p><p>Python代码</p><p>#Import Library<br>from sklearn.cluster import KMeans</p><p>#Assumed you have, X (attributes) for training data set and x_test(attributes) of test_dataset</p><h1 id="Create-KNeighbors-classifier-object-model-1"><a href="#Create-KNeighbors-classifier-object-model-1" class="headerlink" title="Create KNeighbors classifier object model"></a>Create KNeighbors classifier object model</h1><p>k_means = KMeans(n_clusters=3, random_state=0)</p><h1 id="Train-the-model-using-the-training-sets-and-check-score-7"><a href="#Train-the-model-using-the-training-sets-and-check-score-7" class="headerlink" title="Train the model using the training sets and check score"></a>Train the model using the training sets and check score</h1><p>model.fit(X)</p><p>#Predict Output<br>predicted= model.predict(x_test)<br>R代码</p><p>library(cluster)<br>fit &lt;- kmeans(X, 3) # 5 cluster solution<br>8、随机森林<br>随机森林是表示决策树总体的一个专有名词。在随机森林算法中，我们有一系列的决策树（因此又名“森林”）。为了根据一个新对象的属性将其分类，每一个决策树有一个分类，称之为这个决策树“投票”给该分类。这个森林选择获得森林里（在所有树中）获得票数最多的分类。</p><p>每棵树是像这样种植养成的：</p><p>如果训练集的案例数是 N，则从 N 个案例中用重置抽样法随机抽取样本。这个样本将作为“养育”树的训练集。<br>假如有 M 个输入变量，则定义一个数字 m&lt;&lt;M。m 表示，从 M 中随机选中 m 个变量，这 m 个变量中最好的切分会被用来切分该节点。在种植森林的过程中，m 的值保持不变。<br>尽可能大地种植每一棵树，全程不剪枝。<br>若想了解这个算法的更多细节，比较决策树以及优化模型参数，我建议你阅读以下文章：</p><p><a href="https://www.analyticsvidhya.com/blog/2014/06/introduction-random-forest-simplified/" target="_blank" rel="noopener">随机森林入门—简化版</a><br><a href="https://www.analyticsvidhya.com/blog/2014/06/comparing-cart-random-forest-1/" target="_blank" rel="noopener">将 CART 模型与随机森林比较（上）</a><br><a href="https://www.analyticsvidhya.com/blog/2014/06/comparing-random-forest-simple-cart-model/" target="_blank" rel="noopener">将随机森林与 CART 模型比较（下）</a><br><a href="https://www.analyticsvidhya.com/blog/2015/06/tuning-random-forest-model/" target="_blank" rel="noopener">调整你的随机森林模型参数</a><br>Python</p><p>#Import Library<br>from sklearn.ensemble import RandomForestClassifier</p><p>#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset</p><h1 id="Create-Random-Forest-object"><a href="#Create-Random-Forest-object" class="headerlink" title="Create Random Forest object"></a>Create Random Forest object</h1><p>model= RandomForestClassifier()</p><h1 id="Train-the-model-using-the-training-sets-and-check-score-8"><a href="#Train-the-model-using-the-training-sets-and-check-score-8" class="headerlink" title="Train the model using the training sets and check score"></a>Train the model using the training sets and check score</h1><p>model.fit(X, y)</p><p>#Predict Output<br>predicted= model.predict(x_test)<br>R代码</p><p>library(randomForest)<br>x &lt;- cbind(x_train,y_train)</p><h1 id="Fitting-model-3"><a href="#Fitting-model-3" class="headerlink" title="Fitting model"></a>Fitting model</h1><p>fit &lt;- randomForest(Species ~ ., x,ntree=500)<br>summary(fit)</p><p>#Predict Output<br>predicted= predict(fit,x_test)<br>9、降维算法<br>在过去的 4 到 5 年里，在每一个可能的阶段，信息捕捉都呈指数增长。公司、政府机构、研究组织在应对着新资源以外，还捕捉详尽的信息。</p><p>举个例子：电子商务公司更详细地捕捉关于顾客的资料：个人信息、网络浏览记录、他们的喜恶、购买记录、反馈以及别的许多信息，比你身边的杂货店售货员更加关注你。</p><p>作为一个数据科学家，我们提供的数据包含许多特点。这听起来给建立一个经得起考研的模型提供了很好材料，但有一个挑战：如何从 1000 或者 2000 里分辨出最重要的变量呢？在这种情况下，降维算法和别的一些算法（比如决策树、随机森林、PCA、因子分析）帮助我们根据相关矩阵，缺失的值的比例和别的要素来找出这些重要变量。</p><p>想要知道更多关于该算法的信息，可以阅读 《降维算法的初学者指南》 。</p><p>Python代码</p><p>#Import Library<br>from sklearn import decomposition</p><p>#Assumed you have training and test data set as train and test</p><h1 id="Create-PCA-obeject-pca-decomposition-PCA-n-components-k-default-value-of-k-min-n-sample-n-features"><a href="#Create-PCA-obeject-pca-decomposition-PCA-n-components-k-default-value-of-k-min-n-sample-n-features" class="headerlink" title="Create PCA obeject pca= decomposition.PCA(n_components=k) #default value of k =min(n_sample, n_features)"></a>Create PCA obeject pca= decomposition.PCA(n_components=k) #default value of k =min(n_sample, n_features)</h1><h1 id="For-Factor-analysis"><a href="#For-Factor-analysis" class="headerlink" title="For Factor analysis"></a>For Factor analysis</h1><p>#fa= decomposition.FactorAnalysis()</p><h1 id="Reduced-the-dimension-of-training-dataset-using-PCA"><a href="#Reduced-the-dimension-of-training-dataset-using-PCA" class="headerlink" title="Reduced the dimension of training dataset using PCA"></a>Reduced the dimension of training dataset using PCA</h1><p>train_reduced = pca.fit_transform(train)</p><p>#Reduced the dimension of test dataset<br>test_reduced = pca.transform(test)</p><p>#For more detail on this, please refer  this link.<br>R Code</p><p>library(stats)<br>pca &lt;- princomp(train, cor = TRUE)<br>train_reduced  &lt;- predict(pca,train)<br>test_reduced  &lt;- predict(pca,test)<br>10、Gradient Boosting 和 AdaBoost 算法<br>当我们要处理很多数据来做一个有高预测能力的预测时，我们会用到 GBM 和 AdaBoost 这两种 boosting 算法。boosting 算法是一种集成学习算法。它结合了建立在多个基础估计值基础上的预测结果，来增进单个估计值的可靠程度。这些 boosting 算法通常在数据科学比赛如 Kaggl、AV Hackathon、CrowdAnalytix 中很有效。</p><p>更多： 详尽了解 Gradient 和 AdaBoost</p><p>Python代码</p><p>#Import Library<br>from sklearn.ensemble import GradientBoostingClassifier</p><p>#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset</p><h1 id="Create-Gradient-Boosting-Classifier-object"><a href="#Create-Gradient-Boosting-Classifier-object" class="headerlink" title="Create Gradient Boosting Classifier object"></a>Create Gradient Boosting Classifier object</h1><p>model= GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=1, random_state=0)</p><h1 id="Train-the-model-using-the-training-sets-and-check-score-9"><a href="#Train-the-model-using-the-training-sets-and-check-score-9" class="headerlink" title="Train the model using the training sets and check score"></a>Train the model using the training sets and check score</h1><p>model.fit(X, y)</p><p>#Predict Output<br>predicted= model.predict(x_test)<br>R代码</p><p>library(caret)<br>x &lt;- cbind(x_train,y_train)</p><h1 id="Fitting-model-4"><a href="#Fitting-model-4" class="headerlink" title="Fitting model"></a>Fitting model</h1><p>fitControl &lt;- trainControl( method = “repeatedcv”, number = 4, repeats = 4)<br>fit &lt;- train(y ~ ., data = x, method = “gbm”, trControl = fitControl,verbose = FALSE)<br>predicted= predict(fit,x_test,type= “prob”)[,2]<br>GradientBoostingClassifier 和随机森林是两种不同的 boosting 树分类器。人们常常问起这两个算法之间的区别。</p><p>结语<br>现在我能确定，你对常用的机器学习算法应该有了大致的了解。写这篇文章并提供 Python 和 R 语言代码的唯一目的，就是让你立马开始学习。如果你想要掌握机器学习，那就立刻开始吧。做做练习，理性地认识整个过程，应用这些代码，并感受乐趣吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;谷歌董事长施密特曾说过：虽然谷歌的无人驾驶汽车和机器人受到了许多媒体关注，但是这家公司真正的未来在于机器学习，一种让计算机更聪明、更个性化的
      
    
    </summary>
    
      <category term="机器学习" scheme="http://www.moyansuyu.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库、数据表的基本操作及查询数据</title>
    <link href="http://www.moyansuyu.com/2019/09/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%81%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%8F%8A%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/"/>
    <id>http://www.moyansuyu.com/2019/09/01/数据库、数据表的基本操作及查询数据/</id>
    <published>2019-09-01T11:38:43.366Z</published>
    <updated>2019-06-02T03:02:10.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库的基本操作"><a href="#数据库的基本操作" class="headerlink" title="数据库的基本操作"></a>数据库的基本操作</h3><ol><li><p>创建数据库 <code>CREATE DATABASE database_name</code><br> database_name为要创建的数据库的名称</p></li><li><p>删除数据库 <code>DROP DATABASE database_name</code><br> database_name为要删除的数据库的名称</p></li><li><p>数据库存储引擎<br>数据库存储引擎是数据库底层软件组成，数据库管理系统(DBMS)使用数据引擎进行创建、查询、更新和删除数据操作。<br>MySQL的核心就是存储引擎。</p><hr></li></ol><p><strong>存储引擎比较</strong></p><table><thead><tr><th>功能</th><th>MYISAM</th><th>MEMORY</th><th>INNODB</th><th>ARCHIVE</th></tr></thead><tbody><tr><td>存储限制</td><td>256TB</td><td>RAM</td><td>64TB</td><td>None</td></tr><tr><td>支持事务</td><td>No</td><td>No</td><td>Yes</td><td>No</td></tr><tr><td>支持全文索引</td><td>Yes</td><td>No</td><td>No</td><td>No</td></tr><tr><td>支持数索引</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>支持哈希索引</td><td>No</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td>支持数据缓存</td><td>No</td><td>N/A</td><td>Yes</td><td>No</td></tr><tr><td>支持外键</td><td>No</td><td>No</td><td>Yes</td><td>No</td></tr></tbody></table><h3 id="数据表的基本操作"><a href="#数据表的基本操作" class="headerlink" title="数据表的基本操作"></a>数据表的基本操作</h3><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><ol><li><p>创建表的语法形式</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>&lt;表名&gt;</span><br><span class="line">(</span><br><span class="line">    字段名<span class="number">1</span> 数据类型 [列级别约束条件] [默认值],</span><br><span class="line">    字段名<span class="number">2</span> 数据类型 [列级别约束条件] [默认值],</span><br><span class="line">    ……</span><br><span class="line">    [表级别约束条件]</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>使用主键约束</p><blockquote><p>主键约束要求主键列的数据唯一，并且不允许为空。他能唯一地标识表中的一条记录，可以结合外键来定义不同数据表之间的关系，并且可以加快数据库查询的速度。</p><ol><li>单字段主键<ol><li>在定义列的同时指定主键。 <code>字段名 数据类型 PRIMARY KEY [默认值]</code></li><li>在定义完所有列之后指定主键。 <code>[CONSTRAINT &lt;约束名&gt;] PRIMARY KEY [字段名]</code></li></ol></li><li>多字段联合主键<br>主键由多个字段联合组合而成。 <code>PRIMARY KEY [字段1、字段2...]</code><br>其位置放置在定义完所有的主键之后</li></ol></blockquote></li><li><p>使用外键约束<br> 外键用来在两个表的数据之间建立链接，它可以是一列或者多列。一个表可以有一个或多个外键。<br> <code>[CONSTRAINT&lt;外键名&gt;] FOREIGN KEY 字段1[,字段2...] REFERENCES&lt;主表名&gt; 主键列1[,主键列2...]</code></p></li><li><p>使用非空约束<br> 非空约束指字段的值不能为空。对于使用了非空约束的字段，如果用户在添加数据时没有指定值，数据库系统会报错。 <code>字段名 数据类型 NOT NULL</code></p></li><li><p>使用唯一性约束<br> 唯一性约束要求该列唯一，允许为空，但只能出现一个空值。<br> 唯一约束可以确保一列或者几列不出现重复值。</p><ol><li>在定义完列之后直接指定唯一约束。<code>字段名 数据类型 UNIQUE</code></li><li>在定义完所有列之后指定唯一约束。<code>[CONSTRAINT&lt;约束名&gt;] UNIQUE(&lt;字段名&gt;)</code></li></ol></li><li><p>使用默认约束<br> 默认约束指定某列的默认值。 <code>字段名 数据类型 DEFAULT 默认值</code></p></li><li><p>设置表的属性值自动增加<br> 在数据库应用中，可以通过为表的主键添加 <code>AUTO_INCREMENT</code>关键字来实现：当每新增加一条记录，使该主键自动加一。一个表只能有一个字段使用 <code>AUTO_INCREMENT</code>约束，且该字段必须为主键的一部分。其约束的字段可以是任何整数类型。<br> <code>字段名 数据类型 AUTO_INCREMENT</code></p></li></ol><h4 id="查看数据表结构"><a href="#查看数据表结构" class="headerlink" title="查看数据表结构"></a>查看数据表结构</h4><ol><li>查看表基本结构语句<br><code>DESCRIBE 表名;</code> 或者简写为 <code>DESC 表名;</code></li><li>查看表详细结构语句<br><code>SHOW CREATE TABLE &lt;表名/G&gt;;</code><br>如果不加 <code>/G</code>参数，显示的结果可能非常混乱，加上参数 <code>/G</code>后，可使显示结果更加直观，易于查看。</li></ol><h4 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h4><ol><li>修改表名<br><code>ALTER TABLE &lt;旧表名&gt; RENAME [TO] &lt;新表名&gt;;</code></li><li>修改字段的数据类型<br><code>ALTER TABLE &lt;表名&gt; MODIFY &lt;字段名&gt; &lt;数据类型&gt;;</code></li><li>修改字段名<br><code>ALTER TABLE &lt;表名&gt; CHANGE &lt;旧字段名&gt; &lt;新字段名&gt; &lt;新数据类型&gt;;</code></li><li>添加字段<br><code>ALTER TABLE &lt;表名&gt; ADD &lt;新字段名&gt; &lt;新数据类型&gt; [约束条件] [FIRST|AFTER 已存在字段名];</code></li><li>删除字段<br><code>ALTER TABLE &lt;表名&gt; DROP &lt;字段名&gt;;</code></li><li>修改字段的排列位置<br><code>ALTER TABLE &lt;表名&gt; MODIFY &lt;字段1&gt; &lt;数据类型&gt; FIRST|AFTER &lt;字段2&gt;;</code></li><li>更改表的存储引擎<br><code>ALTER TABLE &lt;表名&gt; ENGINE=&lt;更改后的存储引擎名&gt;;</code></li><li>删除表的外键约束<br><code>ALTER TABLE &lt;表名&gt; DROP FOREIGN KEY &lt;外键约束名&gt;;</code></li></ol><h4 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h4><p><code>DROP TABLE [IF EXISTS] 表1,表2...表n;</code></p><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="基本查询语句"><a href="#基本查询语句" class="headerlink" title="基本查询语句"></a>基本查询语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    &#123;*|&lt;字段列表&gt;&#125;</span><br><span class="line">    [</span><br><span class="line">        <span class="keyword">FROM</span> &lt;表<span class="number">1</span>&gt;,&lt;表<span class="number">2</span>&gt;...</span><br><span class="line">        [<span class="keyword">WHERE</span> &lt;表达式&gt;]</span><br><span class="line">        [<span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;<span class="keyword">group</span> <span class="keyword">by</span> definition&gt;]</span><br><span class="line">        [<span class="keyword">HAVING</span> &lt;expression&gt;[&#123;&lt;<span class="keyword">operator</span>&gt;&lt;expression&gt;&#125;...]]</span><br><span class="line">        [<span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;<span class="keyword">order</span> <span class="keyword">by</span> definition&gt;]</span><br><span class="line">        [<span class="keyword">LIMIT</span> [<span class="keyword">offset</span>,] &lt;<span class="keyword">row</span> <span class="keyword">count</span>&gt;]</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">SELECT</span> [字段<span class="number">1</span>,字段<span class="number">2</span>,...,字段n]</span><br><span class="line"> <span class="keyword">FROM</span> [表或视图]</span><br><span class="line"> <span class="keyword">WHERE</span> [查询条件];</span><br></pre></td></tr></table></figure><h4 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h4><ol><li>查询所有字段<br><code>SELECT * FROM 表名;</code></li><li>查询指定字段<br><code>SELECT 字段名1[,字段名2,...,字段名n] FROM 表名;</code></li><li>查询指定记录<br>在 <code>SELECT</code>语句中，通过 <code>WHERE</code>子句可以对数据进行过滤。<br><code>SELECT 字段名1[,字段名2,...,字段名n] FROM 表名 WHERE 查询条件;</code></li><li>带 <code>IN</code>关键字的查询<br><code>IN</code>操作符用来查询满足指定范围内的条件的记录，使用 <code>IN</code>操作符，将所有检索条件用括号括起来，检索条件之间用逗号隔开，只要满足条件范围内的一个值即为匹配项。<br>在 <code>IN</code>关键字前面加上 <code>NOT</code>即可使得查询的结果正好相反。</li><li>带 <code>BETWEEN AND</code>的范围查询<br><code>BETWEEN AND</code>用来查询某个范围内的值，该操作符需要有两个参数，即范围的开始值和结束。如果字段值满足指定的范围查询条件，则这些记录被返回。<br>同样，在<code>BETWEEN AND</code>关键字前面加上 <code>NOT</code>即可使得查询的结果正好相反。</li><li>带 <code>LIKE</code>的字符匹配查询<br><code>LIKE</code>关键字即是使用通配符来进行匹配查找。通配符是一种在SQL的 <code>WHERE</code>条件子句中拥有特殊意思的字符，可以和 <code>LIKE</code>一起使用的通配符有 <code>%</code>和 <code>_</code>。百分号通配符 <code>%</code>，匹配任意长度的字符，甚至包括零字符。<br>下划线通配符 <code>_</code> ，一次只能匹配任意一个字符。</li><li>查询空值<br>  空值不同于0，也不同于空字符串。空值一般表示数据未知、不适用或将在以后添加数据。<br>  在 <code>SELECT</code>语句中使用 <code>IS NULL</code>子句，可以查询某字段内容为空记录。</li><li>带 <code>AND</code>的多条件查询<br><code>AND</code>主要用于 <code>WHERE</code>子句中，用来链接两个甚至多个查询条件，表示所有的条件都需要满足才会返回值。</li><li>带 <code>OR</code>的多条件查询<br><code>OR</code>也主要用于 <code>WHERE</code>子句中，用来链接两个甚至多个查询条件，表示所有的条件仅需满足其中之一项便会返回值。</li><li>查询结果不重复<br> 在 <code>SELECT</code>语句中，使用 <code>DISTINCT</code>关键字来指示MySQL消除重复的记录。<br> <code>SELECT  DISTINCT 字段名 FROM 表名;</code></li><li>对查询结果排序<br>  用 <code>ORDER BY</code>语句来对查询的结果进行排序。<br>  在后面添加 <code>DESC</code>表示降序排序<br>  在后面添加 <code>ASC</code>或默认，表示升序排序</li><li>分组查询<pre><code>在MySQL中使用 `GROUP BY`来对数据进行分组`[GROUP BY    字段] [HAVING &lt;条件表达式&gt;] [WITH ROLLUP]``HAVING` 关键字用来过滤数据，因为 `WHERE`不能和 `GROUP BY`混用`WITH ROLLUP`关键字是在所有查询出的记录之后增加一条记录，该记录计算查询出的所有记录的总和，即统计记录数量。但是`ROLLUP`和能够与 `GROUP BY`同时使用的`ORDER BY`不能同时使用。</code></pre></li><li>使用 <code>LIMIT</code>限制查询结果的数量<br>  <code>LIMIT [位置偏移量,] 行数</code></li></ol><h4 id="使用集合函数查询"><a href="#使用集合函数查询" class="headerlink" title="使用集合函数查询"></a>使用集合函数查询</h4><table><thead><tr><th align="center">函数</th><th>作用</th></tr></thead><tbody><tr><td align="center">AVG()</td><td>返回某列的平均值</td></tr><tr><td align="center">COUNT()</td><td>返回某列的行数</td></tr><tr><td align="center">MAX()</td><td>返回某列的最大值</td></tr><tr><td align="center">MIN()</td><td>返回某列的最小值</td></tr><tr><td align="center">SUM()</td><td>返回某列值的和</td></tr></tbody></table><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><ol><li>内连接查询<br>在内连接查询中，只有满足条件的记录才能出现在结果关系中。两个表之间的关系通过 <code>(INNER) JOIN</code>指定。 使用这种语法的时候，连接的条件使用 <code>ON</code>子句给出，而不是用 <code>WHERE</code>。</li><li>外连接查询<ol><li><code>LEFT JOIN</code>左连接<br> 返回包括左表中的所有记录和右表中连接字段相等的记录。</li><li><code>RIGHT JOIN</code>右连接<br> 返回包括右表中的所有记录和左表中连接字段相等的记录。</li></ol></li><li>复合条件连接查询<br> 复合条件连接查询是在连接查询的过程中，通过添加过滤条件，限制查询的结果，使查询的结果更加准确。</li></ol><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><blockquote><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询。</p><ol><li>带 <code>ANY</code>、<code>SOME</code>关键字的子查询<br><code>ANY</code>和 <code>SOME</code>关键字是同义词，表示满足其中任一条件，它们允许创建一个表达式对子查询的返回值列表进行比较，只要满足内层子查询中的任何一个比较条件，就返回一个结果作为外层查询的条件。</li><li>带 <code>ALL</code>关键字的子查询<br>使用 <code>ALL</code>时，需要同时满足所有内层查询的条件。</li><li>带 <code>EXISTS</code>关键字的子查询<br><code>EXISTS</code>关键字后面的参数是一个任一的子查询，系统对子查询进行运算以判断它是否返回行，如果至少返回一行，那么 <code>EXISTS</code>的结果为 <code>true</code>，此时外层查询语句将进行查询；如果子查询没有返回任何行，那么 <code>EXISTS</code>的结果为 <code>false</code>，此时外层语句不进行查询。</li><li>带 <code>IN</code>关键字的子查询<br>使用 <code>IN</code>关键字进行子查询时，内层查询语句仅仅返回一个数据列，这个数据列里的值将提供给外层查询语句进行比较操作。当外层查询语句内只要有一个内层查询语句返回的数据列中的数据时，则判断为满足条件，外层查询语句将进行查询。</li><li>带比较运算符的子查询<br>子查询可以使用如 <code>&#39;&lt;&#39;,&#39;&lt;=&#39;,&#39;=&#39;,&#39;&gt;&#39;,&#39;&gt;=&#39;,&#39;!=&#39;</code>等比较运算符。</li></ol></blockquote><h4 id="合并查询结果"><a href="#合并查询结果" class="headerlink" title="合并查询结果"></a>合并查询结果</h4><p>利用 <code>UNION</code>关键字，可以给出多条 <code>SELECT</code>语句，并将他们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同。各个 <code>SELECT</code>语句之间使用 <code>UNION</code>或 <code>UNION ALL</code>关键字分割。 <code>UNION</code>不适用关键字 <code>ALL</code>，执行的时候删除重复的记录，所有返回的行都是唯一的；使用关键字 <code>ALL</code>的作用时不删除重复行也不对结果进行自动排序。</p><h4 id="为表和字段取别名"><a href="#为表和字段取别名" class="headerlink" title="为表和字段取别名"></a>为表和字段取别名</h4><ol><li>为表取别名<br><code>表名 [AS] 表别名</code></li><li>为字段取别名<br><code>列名 [AS] 列别名</code></li><li>有时为了方便，也会把<code>AS</code>省略，之间在后面写上别名，和前面内容用空格隔开就好</li></ol><h4 id="使用正则表达式查询"><a href="#使用正则表达式查询" class="headerlink" title="使用正则表达式查询"></a>使用正则表达式查询</h4><blockquote><p><code>MYSQL</code>中使用 <code>REGEXP</code>关键字指定正则表达式的字符匹配模式。</p></blockquote><p><strong>正则表达式常用字符匹配列表</strong><br>|选项|说明|<br>| :———–: | —————— |<br>|<code>^</code>|匹配文本的开始字符|<br>|<code>$</code>|匹配文本的结束字符|<br>|<code>.</code>|匹配任何单子符|<br>|<code>*</code>|匹配零个或多个在他前面的字符|<br>|<code>+</code> |匹配前面的字符1次或多次|<br>|<code>&lt;字符串&gt;</code>|匹配保护指定的字符串的文本|<br>|<code>[字符集合]</code>|匹配字符集合中的任何一个字符|<br>|<code>[^]</code>|匹配不在括号中的任何字符|<br>|<code>字符串{n,}</code>|匹配前面的字符串至少n次|<br>|<code>字符串{n,m}</code>|匹配前面的字符串至少n次，至多m次|</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据库的基本操作&quot;&gt;&lt;a href=&quot;#数据库的基本操作&quot; class=&quot;headerlink&quot; title=&quot;数据库的基本操作&quot;&gt;&lt;/a&gt;数据库的基本操作&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建数据库 &lt;code&gt;CREATE DATABASE database_
      
    
    </summary>
    
      <category term="数据分析" scheme="http://www.moyansuyu.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="MYSQL" scheme="http://www.moyansuyu.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>如何成为数据科学家</title>
    <link href="http://www.moyansuyu.com/2019/09/01/%E6%88%90%E4%B8%BA%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%AE%B6/"/>
    <id>http://www.moyansuyu.com/2019/09/01/成为数据科学家/</id>
    <published>2019-09-01T11:38:43.319Z</published>
    <updated>2019-08-04T10:30:17.338Z</updated>
    
    <content type="html"><![CDATA[<p>成为数据科学家！</p><p>事实上，你可以成为一名真正的数据科学家，且不需要掌握这些技能。NoSQL和MapReduce不是新概念————在这些关键词被创建之前，就有很多人接触到它们。但要成为一名数据科学家，你需要以下能力。</p><ul><li>敏锐的商业头脑。</li><li>真正的大数据专业知识（例如，可以在几个小时内快速地处理一个5000万行的数据集）。</li><li>认知数据的能力。</li><li>对模型具有猜凝精神。</li><li>了解大数据”诅咒”。</li><li>有能力沟通并理解管理人员正在试图解决哪些问题。</li><li>能正确评估付你工资所能带来的回报（ROI）或效益提升（lift）。</li><li>能够快速地识别一个简单的、健壮的、可扩展性的解决方案。</li><li>能够说服推动管理人员，即使不情愿，也要为了公司、用户和股东的利益，转到正确的方向上。</li><li>真正热爱数据分析。</li><li>成功案例的实际应用经验。</li><li>数据架构知识。</li><li>数据收集和清理技能。</li><li>计算复杂度的基础知识一如何开发健壮的、商效的、可扩展的、可移植的架构。</li><li>良好的算法知识。</li></ul><p>数据科学家在商业分析、统计学和计算机科学等领域也是通才，比如会掌握这些专业知识:健壮性、实验设计、算法复杂度、仪表盘和数据可视化。一些数据科家也是数据策略师————他们可以开发数据收集策略，并使用数据来发现可操作的、能对商业产生影响的见解。这就要求数据科学家具有创造性，能根据业务要求，分析、提出解决方案。</p><p>要理解数据科学，所需的基本数学知识包括:</p><ul><li>代数，如果可能的话，包括基本矩阵理论。</li><li>微积分入门课程。要掌握的理论不多，只需要理解计算的复杂度和o标记法即可。了解特殊函数，包括对数、指数、暴蹈数。微分方程、积分和复数不是必要的。</li><li>统计与概览的入门课程，要了解随机变量、概率、均值、方差、百分位数、实验设计、交叉验证、拟合度和稳健统计的概念。</li></ul><p>从技术的角度，要掌握的重要技能和知识有R、Python、Excel、SQL、图形（可视化）、FTP基本的UNIX命令（sort、grep、head、tail、管道和重定向操作符、cat、cron定时等），以及对如何设计和访问数据库有基本了解。了解分布式系统如何工作和在哪里能发现瓶颈（是在硬盘和内存之间的数据传输，还是在互联网上），这也很重要。最后，要了解网络爬虫基本知识，有助于获取互联网上能找到的非结构化数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;成为数据科学家！&lt;/p&gt;
&lt;p&gt;事实上，你可以成为一名真正的数据科学家，且不需要掌握这些技能。NoSQL和MapReduce不是新概念————在这些关键词被创建之前，就有很多人接触到它们。但要成为一名数据科学家，你需要以下能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;敏锐的商业头脑。&lt;
      
    
    </summary>
    
      <category term="数据科学" scheme="http://www.moyansuyu.com/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>感知机算法</title>
    <link href="http://www.moyansuyu.com/2019/09/01/%E6%84%9F%E7%9F%A5%E6%9C%BA%E7%AE%97%E6%B3%95/"/>
    <id>http://www.moyansuyu.com/2019/09/01/感知机算法/</id>
    <published>2019-09-01T11:38:43.288Z</published>
    <updated>2019-08-04T10:15:00.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="感知机算法"><a href="#感知机算法" class="headerlink" title="感知机算法"></a>感知机算法</h1><p>感知机接受多个信号，输出一个信号。这里所说的“信号”可以想象成电流或河流那样具备“流动性”的东西。像电流流过导线，向前方输送电子一样，感知机的信号也会形成流，向前方输送信息。但是，和实际的电流不同的是，感知机的信号只有“流/不流”(1/0)两种取值。</p><p>比如，<code>x1</code>、<code>x2</code>是输入信号，<code>y</code>是输出信号，<code>w1</code>、<code>w2</code>是权重(w是weight的首字母)。输入信号被送往神经元时，会被分别乘以固定的权重(<code>w1x1</code>、<code>w2x2</code>)。神经元会计算传送过来的信号的总和，只有当这个总和超过了某个界限值时，才会输出1。这也成为“神经元被激活”。这里将这个界限值成为<code>阈值</code>，用符号<code>θ</code> 表示。</p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><ul><li>感知机是具有输入和输出的算法，给定一个输入后，将输出一个既定的值。</li><li>感知机将权重和偏置设定为参数。</li><li>使用感知机可以表示与门和或门等逻辑电路。</li><li>异或门无法通过单层感知机来表示。</li><li>使用2层感知机可以表示异或门。</li><li>单层感知机只能表示线性空间，而多层感知机可以表示非线性空间。</li><li>多层感知机(在理论上)可以表示计算机。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;感知机算法&quot;&gt;&lt;a href=&quot;#感知机算法&quot; class=&quot;headerlink&quot; title=&quot;感知机算法&quot;&gt;&lt;/a&gt;感知机算法&lt;/h1&gt;&lt;p&gt;感知机接受多个信号，输出一个信号。这里所说的“信号”可以想象成电流或河流那样具备“流动性”的东西。像电流流过导线，向
      
    
    </summary>
    
      <category term="机器学习" scheme="http://www.moyansuyu.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>你的眼里有星辰和大海</title>
    <link href="http://www.moyansuyu.com/2019/09/01/%E4%BD%A0%E7%9A%84%E7%9C%BC%E9%87%8C%E6%9C%89%E6%98%9F%E8%BE%B0%E5%92%8C%E5%A4%A7%E6%B5%B7/"/>
    <id>http://www.moyansuyu.com/2019/09/01/你的眼里有星辰和大海/</id>
    <published>2019-09-01T11:38:43.272Z</published>
    <updated>2019-06-11T14:01:24.278Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你的眼里有星辰和大海，胜过我看过的所有春花秋月</p></blockquote><p>最近自从开始找工作后，却越发觉得自己对于未来的道路很迷茫。不知该去向何方，也不知去找一个怎样的工作。</p><p>通过在BOSS直聘和前程无忧两家平台上面投递自己的简历，倒也接到过几家面试邀请。不过更多的，却是失败的消息。</p><p>面试的第一家公司，浙江森马电子商务有限公司</p><p>在整个的面试过程当中，谈的倒是挺愉快的。内容也大致就是较为详细的询问了下最近做的项目，以及周边的一些情况。之后也大致谈了一下针对后期培训过程中的事情。总之，三个面试官(部门HR，部门技术主管，部门经理)倒也没感到有什么压力存在，很像和许久不见的朋友在那聊天的感觉，也挺轻松愉快的。</p><p>不过，可能是因为自身的一些原因多一些吧。比如，技术主管问我对于那个项目具体用到的算法提出了质疑，而我却因当时突然大脑麻木了一下，就没有很准确的回答上来。也有可能是别的原因。比如，HR告诉我说更期望招聘一个在电商行业有相关经验的人来做，那样会更合适一些。也有可能是他们发现了比我更合适的人选的缘故。</p><p>总之，也是各方面原因综合造成的吧，很不幸没有面试成功。</p><p>面试的第二家公司， 杭州湃沃电子商务有限公司</p><p>这个好像是我第一次经历二轮面试，结果被刷下来的公司。</p><p>第一轮面试，HR先互相大概了解了下具体的情况，便说需要等待通知。及其幸运的是，当天晚上的时候，HR小姐姐就来电话了，让我准备明天上午的复试。</p><p>第二轮面试，就直接是技术面了。这边竟然也是小姐姐当技术主管，好神奇。不过简单聊了聊之后我便发现，这份工作可能不是我想要的那样。</p><p>更期待找一份能够在专一领域内做一名既懂业务需求，也了解技术框架的那种综合型的大数据分析师。当任务需求到来的时候，我能够独挡一面，完全可以把这一件事情很完美的做出来，而且做出来的效果也很好。</p><p>只不过，这个领域，我真的不知道该去哪里追寻。是电商吗？是物流吗？还是金融？亦或是教育行业？更甚于其他行业？这么多的选择，真的是够头疼的。可是我却在此迷失了方向。</p><p>不过好在我知道了自己的不足， 而这恰恰是湃沃电商的技术主管小姐姐让我深思的问题。因为当听她说道，电商行业的数据分析，大致就是联系运营和仓库的一个桥梁。通过分析对比历史的数据，来考虑哪些货物分别属于爆平滞，哪些货物需要搞促销来完成企业整体的业绩。其实内容倒也很繁琐无味，真的谈不上什么高深技术可言。听完这些后，我觉得电商行业已经不适合我了，太没有挑战性了。</p><p>我的眼里有星辰和大海，心中有勇敢和深情。虽然未来尚未到来，但我已做好充足准备。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;你的眼里有星辰和大海，胜过我看过的所有春花秋月&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近自从开始找工作后，却越发觉得自己对于未来的道路很迷茫。不知该去向何方，也不知去找一个怎样的工作。&lt;/p&gt;
&lt;p&gt;通过在BOSS直聘和前程无忧两家平台上面投
      
    
    </summary>
    
      <category term="随笔" scheme="http://www.moyansuyu.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>win10系统永久激活方法</title>
    <link href="http://www.moyansuyu.com/2019/09/01/win10%E7%B3%BB%E7%BB%9F%E6%B0%B8%E4%B9%85%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/"/>
    <id>http://www.moyansuyu.com/2019/09/01/win10系统永久激活方法/</id>
    <published>2019-09-01T11:38:43.257Z</published>
    <updated>2019-06-15T08:44:36.973Z</updated>
    
    <content type="html"><![CDATA[<p>使用win10系统专业版的新用户注意了，没有激活win10系统的话，就会经常出现系统运行迟钝的现象，如果没有激活win10专业版，用起来很难操作，怎么使得win10专业版永久激活呢，我们知道win10专业版永久激活的步骤就行了。</p><p>需要激活的网友在网上找到了一些激活码，但是激活之后只有短短的一段的时间，又会失效，怎么才能够找到永久激活的办法使得win10专业版永久激活呢？小编这就跟大家说说win10专业版永久激活的方法。</p><p><strong>win10专业版永久激活</strong></p><p>按组合按钮“win+r”打开“运行对话框”，输入命令“slmgr.vbs -xpr”，点击确定</p><p><img src="F:%5CHexo_blog%5Csource_posts%5C13591B239-0.png" alt="win10"></p><p>发现系统未激活状态。</p><p><img src="F:%5CHexo_blog%5Csource_posts%5C13591A632-1.png" alt="win10"></p><p>在“此电脑”鼠标右键，打开属性。</p><p><img src="F:%5CHexo_blog%5Csource_posts%5C1359162123-2.png" alt="win10"></p><p>在开始菜单上，点击鼠标右键，选择命令提示符{管理员}</p><p><img src="F:%5CHexo_blog%5Csource_posts%5C1359164G4-3.png" alt="win10"></p><p>输入命令</p><p><code>slmgr /ipk VK7JG-NPHTM-C97JM-9MPGT-3V66T</code></p><p><code>slmgr /skms kms.xspace.in</code></p><p><code>slmgr /ato</code></p><p>然后，按回车.</p><p><img src="F:%5CHexo_blog%5Csource_posts%5C1359161564-4.png" alt="win10"></p><p> 操作完以上步骤后，按win+r打开运行，输入命令slmgr.vbs -xpr，点击确定，进行查看。</p><p><img src="F:%5CHexo_blog%5Csource_posts%5C13591A3U-5.png" alt="win10"></p><p>激活win10系统成功了。</p><p><img src="F:%5CHexo_blog%5Csource_posts%5C13591A2R-6.png" alt="win10"></p><p>以上就是win10系统永久激活的一些操作步骤。</p><p>附录win10激活码如下，</p><p>单语言版：BT79Q-G7N6G-PGBYW-4YWX6-6F4BT</p><p>专业版：W269N-WFGWX-YVC9B-4J6C9-T83GX，VK7JG-NPHTM-C97JM-9MPGT-3V66T</p><p>企业版：NPPR9-FWDCX-D2C8J-H872K-2YT43，TX9XD-98N7V-6WMQ6-BX7FG-H8Q99</p><p>家庭版：TX9XD-98N7V-6WMQ6-BX7FG-H8Q99，XGVPP-NMH47-7TTHJ-W3FW7-8HV2C</p><p>教育版：NW6C2-QMPVW-D7KKK-3GKT6-VCFB2</p><p>专业版N：MH37W-N47XK-V7XM9-C7227-GCQG9</p><p>企业版N：DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4</p><p>教育版N：2WH4N-8QGBV-H22JP-CT43Q-MDWWJ</p><p>企业版LSTB：WNMTR-4C88C-JK8YV-HQ7T2-76DF9</p><p>企业版LSTB N：2F77B-TNFGY-69QQF-B8YKP-D69TJ</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用win10系统专业版的新用户注意了，没有激活win10系统的话，就会经常出现系统运行迟钝的现象，如果没有激活win10专业版，用起来很难操作，怎么使得win10专业版永久激活呢，我们知道win10专业版永久激活的步骤就行了。&lt;/p&gt;
&lt;p&gt;需要激活的网友在网上找到了一些
      
    
    </summary>
    
      <category term="随笔" scheme="http://www.moyansuyu.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Python的逻辑判断和循环</title>
    <link href="http://www.moyansuyu.com/2019/09/01/Python%E7%9A%84%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/"/>
    <id>http://www.moyansuyu.com/2019/09/01/Python的逻辑判断和循环/</id>
    <published>2019-09-01T11:38:43.210Z</published>
    <updated>2019-06-14T14:31:53.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h2><h3 id="if-elif-else-条件判断"><a href="#if-elif-else-条件判断" class="headerlink" title="if elif else 条件判断"></a>if elif else 条件判断</h3><p>if语句的完整形式是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;执行<span class="number">3</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>if语句可以进行嵌套来实现多重语句的判断</p></blockquote><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ul><li>while循环</li><li>for循环<h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><blockquote><p>在循环中，break语句可以提前退出循环体<br>continue语句可以跳过当前循环，直接开始下一次循环</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;逻辑判断&quot;&gt;&lt;a href=&quot;#逻辑判断&quot; class=&quot;headerlink&quot; title=&quot;逻辑判断&quot;&gt;&lt;/a&gt;逻辑判断&lt;/h2&gt;&lt;h3 id=&quot;if-elif-else-条件判断&quot;&gt;&lt;a href=&quot;#if-elif-else-条件判断&quot; class=&quot;he
      
    
    </summary>
    
      <category term="数据分析" scheme="http://www.moyansuyu.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="http://www.moyansuyu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础知识</title>
    <link href="http://www.moyansuyu.com/2019/09/01/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://www.moyansuyu.com/2019/09/01/Python基础知识/</id>
    <published>2019-09-01T11:38:43.210Z</published>
    <updated>2019-06-02T03:01:59.032Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python应用场景"><a href="#Python应用场景" class="headerlink" title="Python应用场景"></a>Python应用场景</h3><blockquote><ul><li>数据分析</li><li>数据采集</li><li>人工智能</li><li>编程开发</li><li>工具脚本</li></ul></blockquote><h3 id="Python基本变量类型"><a href="#Python基本变量类型" class="headerlink" title="Python基本变量类型"></a>Python基本变量类型</h3><table><thead><tr><th>类型</th><th>描述</th><th>语法示例</th></tr></thead><tbody><tr><td>整型(int)</td><td>无小数部分的数</td><td>1,100</td></tr><tr><td>浮点型(float)</td><td>有小数部分的数</td><td>1.2,100.5</td></tr><tr><td>字符串(string)</td><td>不可变的字符序列</td><td>‘1’,’我很好’</td></tr><tr><td>布尔型</td><td>True、False两种值</td><td></td></tr></tbody></table><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>空值是Python里一个特殊的值，用None表示。<br>None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</p><h3 id="常见的数据类型转换"><a href="#常见的数据类型转换" class="headerlink" title="常见的数据类型转换"></a>常见的数据类型转换</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>int(x)</td><td>将x转换成一个整数</td></tr><tr><td>float(x)</td><td>将x转换成一个浮点数</td></tr><tr><td>str(x)</td><td>将对象x转换成字符串</td></tr><tr><td>repr(x)</td><td>将对象x转换成表达式字符串</td></tr><tr><td>eval(str)</td><td>用来计算在字符串中的有效Python表达式，并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列s转换为一个元祖</td></tr><tr><td>list(s)</td><td>将序列s转换为一个列表</td></tr></tbody></table><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><blockquote><p>最重要的一点就是要见名知意<br>可以使用小驼峰式、大驼峰式，或者用下划线”_”来连接所有的单词</p></blockquote><h3 id="Python的格式化输出"><a href="#Python的格式化输出" class="headerlink" title="Python的格式化输出"></a>Python的格式化输出</h3><p>在Python中，采用的格式化方式和C语言是一致的，用%实现。<br>在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。<br>|格式控制|输出|解释|<br>|-|-|-|<br>|”%d”|24|格式为整数|<br>|”%5d”|24|24，宽度为5个字符|<br>|”%05d”|00024|宽度为5个字符，其余用0填充|<br>|”%f”|1.21997|浮点数|<br>|”%.2f”|1.22|小数点两位的浮点数|<br>|”%7.2f”|1.22|宽度为七，小数点两位的浮点数|<br>|”%s”|Hello|字符串|<br>|”%d%%”|24%|整数和百分号，%%输出一个百分号|</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python应用场景&quot;&gt;&lt;a href=&quot;#Python应用场景&quot; class=&quot;headerlink&quot; title=&quot;Python应用场景&quot;&gt;&lt;/a&gt;Python应用场景&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;数据分析&lt;/li&gt;
&lt;li&gt;数据采集&lt;
      
    
    </summary>
    
      <category term="数据分析" scheme="http://www.moyansuyu.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="http://www.moyansuyu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之NumPy详解(一)</title>
    <link href="http://www.moyansuyu.com/2019/09/01/Python%E4%B9%8BNumPy%E8%AF%A6%E8%A7%A3(%E4%B8%80)/"/>
    <id>http://www.moyansuyu.com/2019/09/01/Python之NumPy详解(一)/</id>
    <published>2019-09-01T11:38:43.210Z</published>
    <updated>2019-06-15T08:46:54.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NumPy简介"><a href="#NumPy简介" class="headerlink" title="NumPy简介"></a>NumPy简介</h2><p>NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。<br>NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。<br>NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：</p><ul><li>一个强大的N维数组对象 ndarray</li><li>广播功能函数</li><li>整合 C/C++/Fortran 代码的工具</li><li>线性代数、傅里叶变换、随机数生成等功能</li></ul><h2 id="NumPy应用"><a href="#NumPy应用" class="headerlink" title="NumPy应用"></a>NumPy应用</h2><p>NumPy 通常与 SciPy（Scientific Python）和 Matplotlib（绘图库）一起使用， 这种组合广泛用于替代 MatLab，是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习。<br>SciPy 是一个开源的 Python 算法库和数学工具包。<br>SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。<br>Matplotlib 是 Python 编程语言及其数值数学扩展包 NumPy 的可视化操作界面。它为利用通用的图形用户界面工具包，如 Tkinter, wxPython, Qt 或 GTK+ 向应用程序嵌入式绘图提供了应用程序接口（API）。</p><h2 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h2><ul><li><a href="http://www.numpy.org/" target="_blank" rel="noopener">NumPy 官网</a></li><li><a href="https://github.com/numpy/numpy" target="_blank" rel="noopener">NumPy 源代码</a></li><li><a href="https://www.scipy.org/" target="_blank" rel="noopener">SciPy 官网</a></li><li><a href="https://github.com/scipy/scipy" target="_blank" rel="noopener">SciPy 源代码</a></li><li><a href="https://matplotlib.org/" target="_blank" rel="noopener">Matplotlib 官网</a></li><li><a href="https://github.com/matplotlib/matplotlib" target="_blank" rel="noopener">Matplotlib 源代码</a></li></ul><h2 id="NumPy-Ndarray-对象"><a href="#NumPy-Ndarray-对象" class="headerlink" title="NumPy Ndarray 对象"></a>NumPy Ndarray 对象</h2><p>NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。<br>ndarray 对象是用于存放同类型元素的多维数组。<br>ndarray 中的每个元素在内存中都有相同存储大小的区域。<br>ndarray 内部由以下内容组成：</p><ul><li>一个指向数据（内存或内存映射文件中的一块数据）的指针。</li><li>数据类型或 dtype，描述在数组中的固定大小值的格子。</li><li>一个表示数组形状（shape）的元组，表示各维度大小的元组。</li><li>一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要”跨过”的字节数。</li></ul><p>ndarray 的内部结构:<br><img src="http://wx4.sinaimg.cn/mw690/005AFGcnly1g3mo5me5atj30jy0750tc.jpg" alt="ndarry内部结构"></p><p>跨度可以是负数，这样会使数组在内存中后向移动，切片中 <code>obj[::-1]</code> 或 <code>obj[:,::-1]</code> 就是如此。<br>创建一个 ndarray 只需调用 NumPy 的 array 函数即可：<br><code>numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)</code><br>参数说明：</p><table><thead><tr><th align="center">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">object</td><td align="left">数组或嵌套的数列</td></tr><tr><td align="center">dtype</td><td align="left">数组元素的数据类型，可选</td></tr><tr><td align="center">copy</td><td align="left">对象是否需要复制，可选</td></tr><tr><td align="center">order</td><td align="left">创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）</td></tr><tr><td align="center">subok</td><td align="left">默认返回一个与基类类型一致的数组</td></tr><tr><td align="center">ndmin</td><td align="left">指定生成数组的最小维度</td></tr></tbody></table><h2 id="NumPy-数据类型"><a href="#NumPy-数据类型" class="headerlink" title="NumPy 数据类型"></a>NumPy 数据类型</h2><p>numpy 支持的数据类型比 Python 内置的类型要多很多，基本上可以和 C 语言的数据类型对应上，其中部分类型对应为 Python 内置的类型。下表列举了常用 NumPy 基本类型。</p><table><thead><tr><th align="center">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">bool_</td><td align="left">布尔型数据类型（True 或者 False）</td></tr><tr><td align="center">int_</td><td align="left">默认的整数类型（类似于 C 语言中的 long，int32 或 int64）</td></tr><tr><td align="center">intc</td><td align="left">与 C 的 int 类型一样，一般是 int32 或 int 64</td></tr><tr><td align="center">intp</td><td align="left">用于索引的整数类型（类似于 C 的 ssize_t，一般情况下仍然是 int32 或 int64）</td></tr><tr><td align="center">int8</td><td align="left">字节（-128 to 127）</td></tr><tr><td align="center">int16</td><td align="left">整数（-32768 to 32767）</td></tr><tr><td align="center">int32</td><td align="left">整数（-2147483648 to 2147483647）</td></tr><tr><td align="center">int64</td><td align="left">整数（-9223372036854775808 to 9223372036854775807）</td></tr><tr><td align="center">uint8</td><td align="left">无符号整数（0 to 255）</td></tr><tr><td align="center">uint16</td><td align="left">无符号整数（0 to 65535）</td></tr><tr><td align="center">uint32</td><td align="left">无符号整数（0 to 4294967295）</td></tr><tr><td align="center">uint64</td><td align="left">无符号整数（0 to 18446744073709551615）</td></tr><tr><td align="center">float_</td><td align="left">float64 类型的简写</td></tr><tr><td align="center">float16</td><td align="left">半精度浮点数，包括：1 个符号位，5 个指数位，10 个尾数位</td></tr><tr><td align="center">float32</td><td align="left">单精度浮点数，包括：1 个符号位，8 个指数位，23 个尾数位</td></tr><tr><td align="center">float64</td><td align="left">双精度浮点数，包括：1 个符号位，11 个指数位，52 个尾数位</td></tr><tr><td align="center">complex_</td><td align="left">complex128 类型的简写，即 128 位复数</td></tr><tr><td align="center">complex64</td><td align="left">复数，表示双 32 位浮点数（实数部分和虚数部分）</td></tr><tr><td align="center">complex128</td><td align="left">复数，表示双 64 位浮点数（实数部分和虚数部分）</td></tr></tbody></table><p>numpy 的数值类型实际上是 dtype 对象的实例，并对应唯一的字符，包括 np.bool_，np.int32，np.float32，等等。</p><h3 id="数据类型对象-dtype"><a href="#数据类型对象-dtype" class="headerlink" title="数据类型对象 (dtype)"></a>数据类型对象 (dtype)</h3><p>数据类型对象是用来描述与数组对应的内存区域如何使用，这依赖如下几个方面：</p><ul><li>数据的类型（整数，浮点数或者 Python 对象）</li><li>数据的大小（例如， 整数使用多少个字节存储）</li><li>数据的字节顺序（小端法或大端法）</li><li>在结构化类型的情况下，字段的名称、每个字段的数据类型和每个字段所取的内存块的部分</li><li>如果数据类型是子数组，它的形状和数据类型</li></ul><p>字节顺序是通过对数据类型预先设定”&lt;”或”&gt;”来决定的。”&lt;”意味着小端法(最小值存储在最小的地址，即低位组放在最前面)。”&gt;”意味着大端法(最重要的字节存储在最小的地址，即高位组放在最前面)。</p><p>dtype 对象是使用以下语法构造的：<br><code>numpy.dtype(object, align, copy)</code></p><ul><li>object - 要转换为的数据类型对象</li><li>align - 如果为 true，填充字段使其类似 C 的结构体。</li><li>copy - 复制 dtype 对象 ，如果为 false，则是对内置数据类型对象的引用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NumPy简介&quot;&gt;&lt;a href=&quot;#NumPy简介&quot; class=&quot;headerlink&quot; title=&quot;NumPy简介&quot;&gt;&lt;/a&gt;NumPy简介&lt;/h2&gt;&lt;p&gt;NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维
      
    
    </summary>
    
      <category term="数据分析" scheme="http://www.moyansuyu.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="http://www.moyansuyu.com/tags/Python/"/>
    
      <category term="NumPy" scheme="http://www.moyansuyu.com/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统常用指令</title>
    <link href="http://www.moyansuyu.com/2019/09/01/Linux%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>http://www.moyansuyu.com/2019/09/01/Linux系统常用指令/</id>
    <published>2019-09-01T11:38:43.163Z</published>
    <updated>2019-06-02T03:01:54.030Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里介绍Linux系统里面较为常用的一些指令。</p></blockquote><ol><li><p>目录切换命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd usr    切换到该目录下的usr目录</span><br><span class="line">cd ../    切换到上一层目录</span><br><span class="line">cd /      切换到系统根目录</span><br><span class="line">cd ~      切换到用户主目录</span><br><span class="line">cd -      切换到上一个所在的目录</span><br><span class="line">pwd       显示当前目录</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>目录的操作命令</li></ol><ol start="3"><li>文件的操作命令</li></ol><ol start="4"><li>压缩文件的操作命令</li></ol><ol start="5"><li>其他命令</li></ol><ol start="6"><li>Linux的权限命令</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这里介绍Linux系统里面较为常用的一些指令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;目录切换命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.moyansuyu.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>JAVA“输出”命令的区别</title>
    <link href="http://www.moyansuyu.com/2019/09/01/JAVA%E2%80%9C%E8%BE%93%E5%87%BA%E2%80%9D%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.moyansuyu.com/2019/09/01/JAVA“输出”命令的区别/</id>
    <published>2019-09-01T11:38:43.147Z</published>
    <updated>2019-06-02T03:01:48.813Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA里面常用的控制台输出语句有 System.out.println 和System.out.print</p><p>一、两者的区别如下：</p><ol><li><p>参数有区别</p><p>System.out.println() 可以不写参数</p><p>System.out.print(参数)  参数不能为空，并且必须有 </p></li><li><p>效果有区别</p><p>println： 会在输出完信息后进行换行，产生一个新行</p><p>print：不会产生新行</p></li><li><p>println 更简洁 ， print 更灵活</p><p>print 可以在后面跟”\n”来达到和 println 一样的效果</p><p>print 也可以跟 “\t” 制表符，等</p></li></ol><p>二、通过阅读java源代码来理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span> ;</span><br><span class="line">    <span class="keyword">while</span> (x &lt; <span class="number">20</span> )&#123;</span><br><span class="line">        System.out.println (x);</span><br><span class="line">        x++ ;</span><br><span class="line">        System.out.print (<span class="string">"\n"</span>;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三、注意事项</p><p>虽然有略微的区别，但是两个方法经常一起搭配使用，更加灵活和方便。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JAVA里面常用的控制台输出语句有 System.out.println 和System.out.print&lt;/p&gt;
&lt;p&gt;一、两者的区别如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;参数有区别&lt;/p&gt;
&lt;p&gt;System.out.println() 可以不写参数&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://www.moyansuyu.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.moyansuyu.com/2019/09/01/hello-world/"/>
    <id>http://www.moyansuyu.com/2019/09/01/hello-world/</id>
    <published>2019-09-01T11:38:43.116Z</published>
    <updated>2019-01-26T06:15:19.019Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CentOS6.5mini版hadoop集群服务搭建流程</title>
    <link href="http://www.moyansuyu.com/2019/09/01/hadoop%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.moyansuyu.com/2019/09/01/hadoop集群服务搭建/</id>
    <published>2019-09-01T11:38:43.022Z</published>
    <updated>2019-06-14T14:38:49.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三个机器都需要执行的操作"><a href="#三个机器都需要执行的操作" class="headerlink" title="三个机器都需要执行的操作"></a>三个机器都需要执行的操作</h2><h3 id="1-需要在win系统下安装VMware虚拟机"><a href="#1-需要在win系统下安装VMware虚拟机" class="headerlink" title="1.需要在win系统下安装VMware虚拟机"></a>1.需要在win系统下安装VMware虚拟机</h3><h3 id="2-需要在VMware虚拟机里面创建三台CentOS6-5-mini版的Linux系统"><a href="#2-需要在VMware虚拟机里面创建三台CentOS6-5-mini版的Linux系统" class="headerlink" title="2.需要在VMware虚拟机里面创建三台CentOS6.5 mini版的Linux系统"></a>2.需要在VMware虚拟机里面创建三台CentOS6.5 mini版的Linux系统</h3><h3 id="3-将三台虚拟机的主机名分别设置为master和slave1与slave2"><a href="#3-将三台虚拟机的主机名分别设置为master和slave1与slave2" class="headerlink" title="3.将三台虚拟机的主机名分别设置为master和slave1与slave2"></a>3.将三台虚拟机的主机名分别设置为master和slave1与slave2</h3><p>通过修改network文件中的hostname文件来进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network</span><br></pre></td></tr></table></figure><p>修改完成之后刷新下网络配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/sysconfig/network</span><br></pre></td></tr></table></figure><p>如果不生效的话，就重启下机器</p><h3 id="4-将其网络配置成-自动连接网络，并且需要是IPV4手动连接的方式"><a href="#4-将其网络配置成-自动连接网络，并且需要是IPV4手动连接的方式" class="headerlink" title="4.将其网络配置成 自动连接网络，并且需要是IPV4手动连接的方式"></a>4.将其网络配置成 自动连接网络，并且需要是IPV4手动连接的方式</h3><h3 id="5-验证他们的网络配置是否正确"><a href="#5-验证他们的网络配置是否正确" class="headerlink" title="5. 验证他们的网络配置是否正确"></a>5. 验证他们的网络配置是否正确</h3><p>通过使用 ifconfig 命令来进行查看想对应的ip地址是否正确</p><p>并且可以通过使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p>来查看其是否能连接到外部网络。</p><p>如果有错误的话，可以通过使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><p>命令来进行修改里面的配置文件。</p><ul><li>将NM_CONTROLLED修改为no</li><li>将BOOTPROTO修改为static</li><li>更改IPADDR的物理地址为一个新的地址</li><li>将HWADDR这一行命令删除掉  这里面存放了之前的MAC地址</li></ul><h3 id="6-重启网络服务"><a href="#6-重启网络服务" class="headerlink" title="6.重启网络服务"></a>6.重启网络服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><h3 id="7-删掉原来系统生成的网络规则"><a href="#7-删掉原来系统生成的网络规则" class="headerlink" title="7.删掉原来系统生成的网络规则"></a>7.删掉原来系统生成的网络规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/udev/rules.d/70-persistent-net.rules</span><br></pre></td></tr></table></figure><h3 id="8-重启Linux系统，使三台电脑都能够连接到网络"><a href="#8-重启Linux系统，使三台电脑都能够连接到网络" class="headerlink" title="8.重启Linux系统，使三台电脑都能够连接到网络"></a>8.重启Linux系统，使三台电脑都能够连接到网络</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot <span class="comment">//这是重启电脑的命令行</span></span><br></pre></td></tr></table></figure><h3 id="9-安装ssh服务"><a href="#9-安装ssh服务" class="headerlink" title="9.安装ssh服务"></a>9.安装ssh服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssh-server    安装ssh服务器</span><br><span class="line">yum -y install openssh-clients   安装ssh客户端</span><br></pre></td></tr></table></figure><h3 id="10-关闭防火墙"><a href="#10-关闭防火墙" class="headerlink" title="10.关闭防火墙"></a>10.关闭防火墙</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br></pre></td></tr></table></figure><h3 id="11-禁止防火墙开机启动"><a href="#11-禁止防火墙开机启动" class="headerlink" title="11.禁止防火墙开机启动"></a>11.禁止防火墙开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig iptables off</span><br></pre></td></tr></table></figure><h3 id="12-配置-etc-hosts-文件"><a href="#12-配置-etc-hosts-文件" class="headerlink" title="12.配置 /etc/hosts 文件"></a>12.配置 /etc/hosts 文件</h3><p>在hosts文件中增加以下内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span>.37.101    master</span><br><span class="line"><span class="number">192.168</span>.37.102    slave1</span><br><span class="line"><span class="number">192.168</span>.37.103    slave2</span><br><span class="line"><span class="comment">// 上面的IP地址为之前配置过的信息，而后面信息为三台虚拟机的hostname名字</span></span><br></pre></td></tr></table></figure><h3 id="13-生成机器的公钥和私钥"><a href="#13-生成机器的公钥和私钥" class="headerlink" title="13.生成机器的公钥和私钥"></a>13.生成机器的公钥和私钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行   ssh-keygen  命令来生成公钥和私钥</span><br></pre></td></tr></table></figure><h3 id="14-把公钥发送给master"><a href="#14-把公钥发送给master" class="headerlink" title="14. 把公钥发送给master"></a>14. 把公钥发送给master</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行 ssh-copy-id master /root/.ssh/id_rsa.pub 来把公钥发送给master</span><br></pre></td></tr></table></figure><h2 id="接下来是master的操作"><a href="#接下来是master的操作" class="headerlink" title="接下来是master的操作"></a>接下来是master的操作</h2><h3 id="1-检查是否收集到了所有的公钥"><a href="#1-检查是否收集到了所有的公钥" class="headerlink" title="1.检查是否收集到了所有的公钥"></a>1.检查是否收集到了所有的公钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行 cat /root/.ssh/authorized_keys  检查是否收集到了所有的公钥</span><br></pre></td></tr></table></figure><h3 id="2-将公钥发送给slave1和slave2"><a href="#2-将公钥发送给slave1和slave2" class="headerlink" title="2. 将公钥发送给slave1和slave2"></a>2. 将公钥发送给slave1和slave2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过执行下面的代码来把公钥发送给slave1和slave2</span></span><br><span class="line">scp /root/.ssh/authorized_keys root<span class="meta">@slave</span>1:/root/.ssh/</span><br><span class="line">scp /root/.ssh/authorized_keys root<span class="meta">@slave</span>2:/root/.ssh/</span><br></pre></td></tr></table></figure><h2 id="三个机器都需要执行的操作-1"><a href="#三个机器都需要执行的操作-1" class="headerlink" title="三个机器都需要执行的操作"></a>三个机器都需要执行的操作</h2><h3 id="分别登录到所有的机器，共九次"><a href="#分别登录到所有的机器，共九次" class="headerlink" title="分别登录到所有的机器，共九次"></a>分别登录到所有的机器，共九次</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh master<span class="comment">//登录到master</span></span><br><span class="line">exit<span class="comment">//退出</span></span><br><span class="line">ssh slave1<span class="comment">//登录到slave1</span></span><br><span class="line">exit<span class="comment">//退出</span></span><br><span class="line">ssh slave2<span class="comment">//登录到slave2</span></span><br><span class="line">exit<span class="comment">//退出</span></span><br></pre></td></tr></table></figure><h2 id="接下来是master的操作-1"><a href="#接下来是master的操作-1" class="headerlink" title="接下来是master的操作"></a>接下来是master的操作</h2><h3 id="1-创建一个存放软件的目录"><a href="#1-创建一个存放软件的目录" class="headerlink" title="1.创建一个存放软件的目录"></a>1.创建一个存放软件的目录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 master系统内的opt 文件夹下 创建一个名为 SoftWare 的文件夹</span></span><br><span class="line">cd /opt/</span><br><span class="line">mkdir SoftWare</span><br></pre></td></tr></table></figure><h3 id="2-安装lrzsz软件"><a href="#2-安装lrzsz软件" class="headerlink" title="2.安装lrzsz软件"></a>2.安装lrzsz软件</h3><p>安装可进行本机和虚拟机之间文件传输的软件 lrzsz</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install lrzsz</span><br></pre></td></tr></table></figure><h3 id="3-上传jdk到创建好SoftWare文件夹下"><a href="#3-上传jdk到创建好SoftWare文件夹下" class="headerlink" title="3.上传jdk到创建好SoftWare文件夹下"></a>3.上传jdk到创建好SoftWare文件夹下</h3><p>用 rz 命令可以上传本地的文件到所在的目录</p><h3 id="4-解压jdk文件"><a href="#4-解压jdk文件" class="headerlink" title="4.解压jdk文件"></a>4.解压jdk文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf jdk-8u151-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="5-配置jdk的环境变量"><a href="#5-配置jdk的环境变量" class="headerlink" title="5. 配置jdk的环境变量"></a>5. 配置jdk的环境变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"><span class="comment">//通过编辑profile文件来配置环境变量</span></span><br><span class="line"><span class="comment">//在文件的最后一行追加以下内容</span></span><br><span class="line">export JAVA_HOME=/opt/SoftWare/jdk1.8.0_151</span><br><span class="line">export JRE_HOME=/opt/SoftWare/jdk1.8.0_151/jre</span><br><span class="line">export CLASSPATH=.:$JRE_HOME/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br></pre></td></tr></table></figure><h3 id="6-刷新环境变量"><a href="#6-刷新环境变量" class="headerlink" title="6.刷新环境变量"></a>6.刷新环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="7-验证环境变量是否配置成功"><a href="#7-验证环境变量是否配置成功" class="headerlink" title="7.验证环境变量是否配置成功"></a>7.验证环境变量是否配置成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>如果出现java的版本信息，则证明java的环境变量已经配置成功了，否则还需要重新配置</p><h3 id="8-上传Hadoop到创建好SoftWare文件夹下"><a href="#8-上传Hadoop到创建好SoftWare文件夹下" class="headerlink" title="8.上传Hadoop到创建好SoftWare文件夹下"></a>8.上传Hadoop到创建好SoftWare文件夹下</h3><p>用 rz 命令可以上传本地的文件到所在的目录</p><h3 id="9-解压Hadoop文件"><a href="#9-解压Hadoop文件" class="headerlink" title="9.解压Hadoop文件"></a>9.解压Hadoop文件</h3><h3 id="10-进入解压后的Hadoop文件夹创建五个新的文件夹"><a href="#10-进入解压后的Hadoop文件夹创建五个新的文件夹" class="headerlink" title="10.进入解压后的Hadoop文件夹创建五个新的文件夹"></a>10.进入解压后的Hadoop文件夹创建五个新的文件夹</h3><p>创建名字为  tmp，logs，hdfs，hdfs/name，hdfs/data 的五个文件夹</p><h3 id="11-使用nodepad-进行配置文件的修改"><a href="#11-使用nodepad-进行配置文件的修改" class="headerlink" title="11.使用nodepad++进行配置文件的修改"></a>11.使用nodepad++进行配置文件的修改</h3><ol start="0"><li><p>首先进入到 hadoop-2.7.3/etc/hadoop 文件夹下面</p></li><li><p>hadoop-env.sh</p><p>修改第 25 行的 ${JAVA_HOME} 为自己的 jdk 安装目录</p><p>​     （/opt/SoftWare/jdk1.8.0_151）</p></li><li><p>yarn-env.sh</p><p> 修改第 23 行，解注释（export JAVA_HOME=/home/y/libexec/jdk1.6.0/），修改路径为自己的 jdk 安装目录</p><p>​     （/opt/SoftWare/jdk1.8.0_151 ）</p></li><li><p>slaves</p><p>修改 localhost 为 slave1 和 slave2</p></li><li><p>重命名 mapred-site.xml.template</p><p>通过指令的方式来进行重命名。源文件叫.template  修改为去掉.template</p><p>mv mapred-site.xml.template mapred-site.xml</p></li><li><p>修改配置文件</p><ol><li><p>配置 etc/hadoop/core-site.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">    &lt;!--定义HadoopMaster的URI和端口--&gt;</span><br><span class="line">    &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">    &lt;!--hadoop 中的临时存储目录，tmp 文件夹的路径 --&gt;</span><br><span class="line">    &lt;value&gt;file:/opt/SoftWare/hadoop-2.7.3/tmp&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;io.file.buffer.size&lt;/name&gt;</span><br><span class="line">    &lt;!--用作序列化文件处理时读写buffer的大小--&gt;</span><br><span class="line">    &lt;value&gt;131702&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置 etc/hadoop/hdfs-site.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;!-- namenode 节点数据存储目录 --&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;file:/opt/SoftWare/hadoop-2.7.3/hdfs/name&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">    &lt;!-- datanode 数据存储目录 --&gt;</span><br><span class="line">    &lt;value&gt;file:/opt/SoftWare/hadoop-2.7.3/hdfs/data&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;!-- 指定DataNode存储block的副本数量,不大于DataNode的个数就行 --&gt;</span><br><span class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;!-- 指定master的http地址 --&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:50090&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;!-- 指定master的https地址 --&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.secondary.https-address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:50091&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;!-- 必须设置为true，否则就不能通过web访问hdfs上的文件信息 --&gt;</span><br><span class="line">    &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置 etc/hadoop/yarn-site.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;!--NodeManager上运行的附属服务。需配置成mapreduce_shuffle，才可运行MapReduce程序--&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.auxservices.mapreduce.shuffle.class&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;!--ResourceManager 对客户端暴露的地址。客户端通过该地址向RM提交应用程序，杀死应用程序等。--&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:8032&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;!--ResourceManager 对ApplicationMaster暴露的访问地址。ApplicationMaster通过该地址向RM申请资源、释放资源等。--&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:8030&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;!--ResourceManager 对NodeManager暴露的地址.。NodeManager通过该地址向RM汇报心跳，领取任务等。--&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:8031&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;!--ResourceManager 对管理员暴露的访问地址。管理员通过该地址向RM发送管理命令等。--&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:8033&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;!--用户可通过该地址在浏览器中查看集群各类信息。--&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:8088&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;!--NodeManager总的可用物理内存。注意，该参数是不可修改的，一旦设置，整个运行过程中不 可动态修改。另外，该参数的默认值是8192MB，因此，这个值通过一 定要配置。不过，Apache已经正在尝试将该参数做成可动态修改的。--&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;2048&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置 etc/hadoop/mapred-site.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">   &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;master:10020&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">   &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;master:19888&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="12-把-SoftWare文件夹拷贝到-slave1-和-slave2-的-opt-下"><a href="#12-把-SoftWare文件夹拷贝到-slave1-和-slave2-的-opt-下" class="headerlink" title="12.把 SoftWare文件夹拷贝到 slave1 和 slave2 的 opt 下"></a>12.把 SoftWare文件夹拷贝到 slave1 和 slave2 的 opt 下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /opt/SoftWare/ root@slave1:/opt/</span><br><span class="line">scp -r /opt/SoftWare/ root@slave2:/opt/</span><br></pre></td></tr></table></figure><h3 id="13-把-etc-profile-文件拷贝到-slave1-和-slave2-的-etc-下"><a href="#13-把-etc-profile-文件拷贝到-slave1-和-slave2-的-etc-下" class="headerlink" title="13.把 /etc/profile 文件拷贝到 slave1 和 slave2 的 /etc 下"></a>13.把 /etc/profile 文件拷贝到 slave1 和 slave2 的 /etc 下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/profile/ root@slave1:/etc/</span><br><span class="line">scp /etc/profile/ root@slave2:/etc/</span><br></pre></td></tr></table></figure><h2 id="三台虚拟机都需要执行的操作"><a href="#三台虚拟机都需要执行的操作" class="headerlink" title="三台虚拟机都需要执行的操作"></a>三台虚拟机都需要执行的操作</h2><h3 id="1-刷新环境变量，验证java是否安装成功"><a href="#1-刷新环境变量，验证java是否安装成功" class="headerlink" title="1.刷新环境变量，验证java是否安装成功"></a>1.刷新环境变量，验证java是否安装成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h3 id="2-安装时间同步软件-ntpdate"><a href="#2-安装时间同步软件-ntpdate" class="headerlink" title="2.安装时间同步软件 ntpdate"></a>2.安装时间同步软件 ntpdate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ntp ntpdate</span><br></pre></td></tr></table></figure><h3 id="3-和网络时间进行同步"><a href="#3-和网络时间进行同步" class="headerlink" title="3.和网络时间进行同步"></a>3.和网络时间进行同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure><h3 id="4-把时间写入硬件进行锁定"><a href="#4-把时间写入硬件进行锁定" class="headerlink" title="4.把时间写入硬件进行锁定"></a>4.把时间写入硬件进行锁定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure><h2 id="接下来是master需要执行的操作"><a href="#接下来是master需要执行的操作" class="headerlink" title="接下来是master需要执行的操作"></a>接下来是master需要执行的操作</h2><h3 id="1-进入到-hadoop-2-7-3-bin-目录"><a href="#1-进入到-hadoop-2-7-3-bin-目录" class="headerlink" title="1.进入到 hadoop-2.7.3/bin 目录"></a>1.进入到 hadoop-2.7.3/bin 目录</h3><h3 id="2-格式化-hdfs"><a href="#2-格式化-hdfs" class="headerlink" title="2.格式化 hdfs"></a>2.格式化 hdfs</h3><p>使用  ./hdfs namenode -format  进行格式化</p><p>出现  /hdfs/name has been successfully formatted 表示成功</p><p>不允许多次格式化，否则会导致集群无法启动</p><p>如果出错的话：</p><pre><code>1. 修改配置文件2. 删除master机器上面的 hdfs/name 和hdfs/data 文件夹，并重新创建两个新的文件夹3. 把修改的内容发送到 slave1 和slave2 下面，要时刻保持三个机器上面的配置文件是一直的4. 重新格式化 master机器</code></pre><h3 id="3-启动hdfs服务"><a href="#3-启动hdfs服务" class="headerlink" title="3.启动hdfs服务"></a>3.启动hdfs服务</h3><p>进入 hadoop-2.7.3/sbin 目录，使用  ./start-dfs.sh  启动 hdfs 服务</p><h3 id="4-启动yarn服务"><a href="#4-启动yarn服务" class="headerlink" title="4.启动yarn服务"></a>4.启动yarn服务</h3><p>进入 hadoop-2.7.3/sbin 目录，使用  ./start-yarn.sh  启动 yarn 服务</p><h3 id="启动全部服务"><a href="#启动全部服务" class="headerlink" title="*启动全部服务"></a>*启动全部服务</h3><p>如果所有的配置都没有发生问题的话，也可以在任意一个位置 使用 start-all.sh 命令来启动全部服务</p><h2 id="三台虚拟机都需要执行的命令"><a href="#三台虚拟机都需要执行的命令" class="headerlink" title="三台虚拟机都需要执行的命令"></a>三台虚拟机都需要执行的命令</h2><h3 id="分别执行-jps-命令-来查看机器当前运行的服务"><a href="#分别执行-jps-命令-来查看机器当前运行的服务" class="headerlink" title="分别执行 jps 命令 来查看机器当前运行的服务"></a>分别执行 jps 命令 来查看机器当前运行的服务</h3><p>如果 master 机器上面，有 NameNode    SecondaryNameNode   ResourceManager 这三个服务</p><p>如果slave 机器上面，有DataNode  NodeManager 这两个服务</p><p>则证明我们的Hadoop集群已经搭建完成了</p><h2 id="最终验证"><a href="#最终验证" class="headerlink" title="最终验证"></a>最终验证</h2><p>首先查看当前 master机器上面的IP地址为多少。例如： 192.168.37.101</p><p>通过浏览器访问 <a href="http://192.168.37.101:8088" target="_blank" rel="noopener">http://192.168.37.101:8088</a> 查看当前Hadoop集群内部的运行状况</p><p>通过浏览器访问 <a href="http://192.168.37.101:50070" target="_blank" rel="noopener">http://192.168.37.101:50070</a> 查看当前Hadoop集群上面的文件和整体集群的信息概览</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;三个机器都需要执行的操作&quot;&gt;&lt;a href=&quot;#三个机器都需要执行的操作&quot; class=&quot;headerlink&quot; title=&quot;三个机器都需要执行的操作&quot;&gt;&lt;/a&gt;三个机器都需要执行的操作&lt;/h2&gt;&lt;h3 id=&quot;1-需要在win系统下安装VMware虚拟机&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="数据分析" scheme="http://www.moyansuyu.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="hadoop" scheme="http://www.moyansuyu.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Excel之VBA语法基础</title>
    <link href="http://www.moyansuyu.com/2019/09/01/Excel%E4%B9%8BVBA%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.moyansuyu.com/2019/09/01/Excel之VBA语法基础/</id>
    <published>2019-09-01T11:38:42.975Z</published>
    <updated>2019-06-14T15:11:24.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h2><blockquote><p>变量用于保存在策划稿女婿运行过程中需要临时保存的值或对象。变量具有不同的类型，也可能包含不同的数值。</p><p>在程序运行时，变量的数值可以改变。而当需要存储静态信息时，可以使用常量。</p></blockquote><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>在VBA中，常量可以分为普通常量和符号常量两种。</p><h4 id="普通常量"><a href="#普通常量" class="headerlink" title="普通常量"></a>普通常量</h4><p>普通常量大致有四种，分别是</p><ul><li>数值常量</li><li>字符串常量</li><li>逻辑常量</li><li>日期常量<h4 id="符号常量"><a href="#符号常量" class="headerlink" title="符号常量"></a>符号常量</h4>符号常量是指用一个符号名来代替数值或字符串，又称为声明常量。<br>其中，符号名必须是以字母开头，由字母、数字、下划线组成的长度不大于40的字符串，其格式为：</li></ul><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Const</span> 符号变量名 [<span class="keyword">As</span> 类型] = 表达式[,符号变量名 = 表达式 ···]</span><br></pre></td></tr></table></figure><h4 id="VBA的内置常量"><a href="#VBA的内置常量" class="headerlink" title="VBA的内置常量"></a>VBA的内置常量</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常量与变量&quot;&gt;&lt;a href=&quot;#常量与变量&quot; class=&quot;headerlink&quot; title=&quot;常量与变量&quot;&gt;&lt;/a&gt;常量与变量&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;变量用于保存在策划稿女婿运行过程中需要临时保存的值或对象。变量具有不同的类型，也可能包含不
      
    
    </summary>
    
      <category term="Excel" scheme="http://www.moyansuyu.com/categories/Excel/"/>
    
    
      <category term="VBA" scheme="http://www.moyansuyu.com/tags/VBA/"/>
    
  </entry>
  
</feed>
